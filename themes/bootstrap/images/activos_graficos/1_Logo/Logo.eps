%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Logo.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Guest User
%%CreationDate: 8/5/13
%%BoundingBox: 0 0 590 183
%%HiResBoundingBox: 0 0 589.2686 182.4961
%%CropBox: 0 0 589.2686 182.4961
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.1 x421 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">logo DEF Personaling</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2013-08-05T15:28:46-04:30</xap:CreateDate>
         <xap:ModifyDate>2013-08-05T15:28:46-04:30</xap:ModifyDate>
         <xap:MetadataDate>2013-08-05T15:28:46-04:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>80</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAUAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q4kAVPTFXjn5h/wDO&#xA;Sflry/LLp/l+Ma3qaVVp1alnG3TeQbyEeCbf5WXRxE83Ow6GUt5bB4N5k/Oz8y9fkc3GtTWkDdLW&#xA;wJtYwP5ax0dh/rscuGOIdjDS449GF3F1c3MhluJXmlPV5GLt49TU5NvApdaX17Zy+rZ3EltKOkkL&#xA;sjfepBxpSAebOvLH57/mZoDoF1V9StV62uo1uFI8PUY+qPofIHHEuPk0mOXSvc9+/Lj/AJyF8q+a&#xA;5YtO1Jf0LrUhCxwytyglY9BHNRaMf5XA8BXKJ4iHW59HKG43D1bKnDdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdiriQBU9MVfK/55fnlc65c3Hlry1cGPQYyYry8iNGu2&#xA;GzKrD/dPbb7X+rmTjx1uXcaTScPqlzeKwQTXEyQQRtLNKwSKJAWZmY0Cqo3JJy5zyaZpH+Sf5qyW&#xA;wuV8uXIjZeQVjGslPeNmDg+3GuQ8SPe4/wCax97EL/T7/TryWyv7aW0u4Txmt5kaORT4MrAEZMFv&#xA;EgRYRGkeXtf1l3j0jTbrUXj3kW0hknKg/wA3pq1MSQESnGPM0r6r5Q816RGZdV0a+sIQaerc20sS&#xA;V6bM6hTgEgURyRlyIKUYWb6G/Ib887n6zb+U/NVz6kUlItJ1OU1dX6LBMx6huiMdwdjtSlGTH1Dr&#xA;NXpP4o/F9H5jurdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVeOf85J/&#xA;mHL5f8tR+X9Pl4anrYZZ2U/FHZjaQ7dDIfgHtyy7FGzbnaHDxS4jyD5NzJdynnlDzjrHlPU5NU0g&#xA;Qi+aCSCOaaJZTF6gp6kXL7LjsfoII2wSjbXkxCYovrX8g21Wf8t7PUtVupry+1Se4upJrh2kkI9Q&#xA;xLVmJ24xAjMXLzdNrKGQgdFv5v8A5W6L5yTTL69mjsF0uYyanqBor/o5UZ5k5Hb7SgqW2X4j41YT&#xA;IXTagwsDe/veA+bfzs1VJ10jyEx8u+VtPPCyhtVCSzcT/fTOQXq9K8a/61Tl8cffzdlj0o5z9Ui+&#xA;ivyd81XnnH8urLUNY43F63q218xRQspjcryKAcfiSnIUpXMfJGi6vU4xCZAeGf8AORf5V6f5Xv7b&#xA;zBokIt9J1OQw3FogpHDc0Lj0/BJFBIXsQabUAvxTvYuw0WoMxwnmHi4NNx1y1z32T+Qf5hyeb/Jq&#xA;w30hk1nRytteu32pEIPozH3ZVIb/AClJ75iZY0XR6zDwT25F6ZlbiOxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV8R/nZ5kk1/8y9auC/KC0mNhajsI7U+mePszhn+nMzGKi7/&#xA;AEsOHGGDZNyHYq+9/IWlfonyToOnEcXtrC3SUdP3npqZDT3cnMKRsvOZpcUyfN51/wA5QeaJ9L8j&#xA;W+k27FJNbuPSmYbH6vCA8g/2TFB8q5PCLLlaDHc77nybmU7l9g/840xun5V2jMNpLq5ZPl6nH9an&#xA;MXN9TpNd/eLv+clYYZPypvXcDlDc2zxdPtGUJ/xFjji+pdCf3gfHmZTu3qX/ADjh5kk0j8y7WzLU&#xA;tdYiks5lrtz4+pE1PHmnEf6xyvKLDh62HFjvufYeYjpHYq7FVk00MMZkmkWONaVdyFUVNBuffFV+&#xA;KuxV2KuxV2KvHf8AnKD8zNZ8j+RLf9A3H1TWdXuhbRXQALRQoheZ05AgN9lK025VG9MVSfXvNn54&#xA;eXvKUVv5Xs5PNGoWmpx2V1dXMDXE6xfULWZ1ZYjGWH1qaaNpG3ULQmvxYq91tHuJLWF7mMQ3LRq0&#xA;0IbkEcgFlDDrQ7VxVVxV2KuxVYtxA0rRLIjSru0YYFh8x1xTS/FDsVdirsVdirsVfnfdXElzcy3E&#xA;prLM7SOf8pzU9fc5nvTAUpYpTTytpX6X8zaTpdCRfXlvbMB4Syqh/A4JGgwyS4Yk+T9AQKbDMF5t&#xA;8u/85Y6t63mzRtLDErZWTTkdg1zKVI+fGBcycA2dv2dH0k+bwzLnYPuX8n9GfR/yz8vWMi8JPqi3&#xA;EinqGuWM7A+4MmYczZLz+plxZCWC/wDOVWsx2vkaw0sMBPqN8rBPGK3Rmc/Q7x5PCN3I7Pjcye4P&#xA;lTMl3CeeRbw2fnXQLsNw9DUbSQtv0WdSa03pTBLkWvKLgR5Pe/8AnJP8z/MGk+YPLnkPQNU/QU2u&#xA;MkuqayrBZILaWb0UKvUFACrsxG/wgA9cwXnE3tmttNhv7nQtc13VfLWnaDez67q1/e3ksctxB6Ut&#xA;u1tczn4ZWRZvUNtRAtOjccVYB+RutebfMH5b6tr/AJ08w6vdaJpFxJbaXBa3lzBfXd5OkSpEbmJ1&#xA;nkpJIiQJy4l3PKvEUVTj82td82av+TurafbarptxJ5Vt9N/xBdW90l5e3N7DJAZOUUB4WyrMruS5&#xA;YsUpxXriqXebfz082ecLT8u/LHla5fRtS85RRS6zqFuP3sKm5ezkEDdUUSW8zkj4qAbjeqqaa5r+&#xA;ueVP+cjvLfk3RtZ1K50PVtOih1Szvby4viJZPrCmZGuWlaORVjjkqlB9BIxVIfyP1rzh561TztHq&#xA;PmnVYPJOnTNdrLDeS/W0DPMYYYbty0qxCJSzhW6qnYsGVSHyT+ffn7RvyQ8y6ld6hNqGoJqVvpug&#xA;6jfObmaKS6ikll5vJUyenHCWTntyPhtiqcfmLP5w8ofkL5c8zr5u1oeavMEkBv5X1C4kVoryJ7r0&#xA;4omcpAYQiDnEFPUEkMMVSH8zV1bWr/8AJbyfqVxPqOpXFlaXt+91K8srvq1xHy9WSRmYlRCRudh0&#xA;xVkX5iXnm3S/zR/L3yPpmsahp93qQtbzzOtjezpHLc31673bcEcIAD6jbDcEVrTFUbpeveedd/5y&#xA;U8x+TtH8yajD5aVHTUP9IaZ4IoUi9Zrb1OSQSNcH0gyKOIbxFcVQPkf82/MPlnzr+acL6le615Z8&#xA;t2t7PpsOp3Mt2y3NvdpbW0YnlLSBJC7A79N9z1VRuj695vl/5x38w/mdrHmPUh5g1CSZ9Mlhu5Y4&#xA;LeP6ytmscVqG+rryk578OQFOJBFcVSqD8wPO+k/849aFPPq99c6t5qvb131K5nlluI7W3f0vTjkk&#xA;ZnUOUBFD0J8ctxRsubocQlIk9Hk1pf31leR3tpcSW95E3OO4idkkVuvIMCDXMqnckAii958//n55&#xA;psfyP8u3+muYfNXmCaWxa9VFJUWjFJZUBBX1JPgpttyJHQZhzjRdBqcYhMgckTd2n5weR/PXlS2t&#xA;ZNU1ny9b2qXXm3Xby7vL2GX7RvgyzStbwCJF5QqqK3T4jU5BoQH5deZPNX5i+XfPv5h+Ydb1DT9M&#xA;063urfRtN028uLKC1aC2+sPKRBJH6jxq0dDISKk17UVYTqX5vee7n/nHnTNYn1y+g8wW+vvpdtfQ&#xA;XEkMk9tFbrcmSYx8fVKswj+KoI61O+Kp9+cXmn8wvJ+n/l7rsXmHUm84ayrXWp6elxItg/FYCkBs&#xA;QfR+H1eFePxGpNTSiqafmP5g85+Tvzh/L/TrLzDqFzqustbP5hsHupZLCVrq7EJEVmzenEn20QKN&#xA;gAftVYqvD760ls724s5dpbaR4ZB/lIxU/iMzw9MDYtQxS9G/5x90n9I/mto/JeUVn613J7elE3A/&#xA;8jGXK8p9Li6yVYy+z8xHRPiv8/NVOo/mtrjb+navFaxg9vRiVW+9+RzMxD0u+0caxhLvyo8jT+cv&#xA;Oljpnps2nxsLjU5ADRbeM1YE9i/2F9zhnKgy1GXggT1fb91dWdjZy3NzKltaWyF5ZXIRERBUkk7A&#xA;AZhOgAJL4s/OX8xP8b+b5Ly3JGkWS/VtMRtiYwatKR2Mjb/Kg7ZmY4cId9pcPhxrqwPJuQn3kGya&#xA;+88+XrQLy9bUbVWB6cfWXlX5DBLkWvMagT5PqT80vyd1HzN5z8u+ePL+oQ2XmLy80YSG8R3triKK&#xA;UyrG7Rnmm7uDQGobtmC84j/N/kDzd5q0DWbe/wBWtrfUb+wk03T7e3SUWdvFcOjXDyFm5zyOsQUN&#xA;xUKNgu7Eqq35TflZbeSvIOn+WtRMGpXNndSX0lwEPpm4MxeKRFfcNGoSh8RirzWb/nGHW7ODzPo+&#xA;g6xa2+kea7hGvb65WeW8htI5vXW3jjBEbnl9qRnq3tiqd6h/zjjDpuqeStZ8oXscV/5OiW2FvqAY&#xA;w3cYmknZmeIco3aS4lYkKR8XTbdVN/KP5KXUPn/U/wAwvN+pJqXmW/V4rSC0Ro7ayieP0aRFyXdh&#xA;F8AYgdzQk1xVA/lX+Q+p+SfLHmny3Nq9td2OvpPFHcx27rcKJYfRRnJk4UQFzwCmpP2h0xVjek/8&#xA;4t6oPys1LyLqmr2YMmojVtNv7aGVnW5WP0QZubqChh+Hiq7Ek1PdVG/mH+Qf5gefPKWjaXqnmGxt&#xA;rrQVjhtLW3ilNrKqxiOSed2+MysFXjReK/EN+VQqmPmP8h/MGo/mH5f87WGs2drfaVZpaTQG2lMM&#xA;bxJKkUtvGZW/uxIpCM1Cy1rvTFUVf/kPdr+a/l3zzperIYdGtIrOW0v45LiRvRgeASiRXQuzK9fi&#xA;Io3xVb7OKonyT+S+peVfzb8x+dYNTt7mx8wNK728sMhuYxcS+vJEjiRUAEgWjEN8IpxHXFWFw/kS&#xA;/lG388trV9HqWg+cZIrWKK0hY6n6txckWscXqSR26t9YnQszkr8O/EVIVebfm9YeZ/KX5RaL5G1W&#xA;9vIoYb4jTtNmskt2nhLSzvJcXUF1qFvKYnlVViR1pUEhqCir2+P8qtH84fkd5b0HT7+A3elWsX1P&#xA;UomE0Buo04XK80ryjeTkKrXsd6bzhPhLkafP4cr6PKrH/nGL8y5tRW2uUtLW05Ue+M6unEHqqJ+8&#xA;NewKj3pl5zB2R1+OnrH5gf8AOO2neYfIOg+W9J1E6dfeW3MtheyJzSR5d5zKgIp6jjlUdPlmNI2b&#xA;dRlyGcjIsw/wt5m19II/OVzafU4YpFk03SxMI5ppoWgaSaWU8mRUkbhHw2b4iTQYGDzPSv8AnH3z&#xA;3o3kTWPy80rX7CLy7rN611PqrwSm/EEixo8HogiI8lhWrc/EU6UVVfPP/OMMer+W/KPlfQdRjsdD&#xA;8utPJei4VnmupblozJKWSgDHg3yrToBiqe/nB+SuqedPNnlXzDpd7a258uyK0tjeJIYpUjmSZQPS&#xA;334cSNtu+KqPnf8AJTzHrn5q+XfP9lqliLjSbeGK5tbqCYxGaEyMssSJJy48peQQyClPtGuKvDfz&#xA;38sPoH5maqoTja6k/wCkbU9itwS0lPlLzGZmM3F32kycWMeWzz7JuS93/wCcTNJ9XzLrmqlQRZ2c&#xA;dspPZrmTnt9FucpznZ13aMvSA+nWZVUsxCqoqzHYADucxnUvljzB+Yf5Iedrs6j5n0TUtO1j7Mt3&#xA;pzRssyJ8Kc+TLU8QOsde3LYZkiEhydxDDmxiokEeadeX/wA8Pyj8jaQ9j5P0K/nllPOeW49OJpWF&#xA;QPUmLSvt2ASg7d8Bxylza56TLkNyIebfmL+c/m7zwPqt262OkK3JNNtqhGI6GVz8UhHvt4DLIYxF&#xA;ysGljj3G5YDk3Jdir1r/AJxn8svqv5iJqboTaaJC9w7EfD6soMUSn3+JnH+rlWY0HC12SoV3vrvM&#xA;V0rsVdirsVdirsVdirsVSXXtcuLH93aJFJOstkkqStSi39z9VRgFJb4WqdxQ0oD1oQGyEL5+f2L9&#xA;J15757VHiEb3CXjsA1eJtLhIKUIHXnU+GJCJQr7Ej0fztq9/dadby6d9WW/SWZJilywaOMWu4UxI&#xA;yit2VLt8Hw1rvtIxbJYgAd+X7f1KOg/mJf6rZWl2dPWC1keNLu7b1+ETSxQTJGyGFZFLLcbSMPT2&#xA;B5fEKJjSZ4QDVu1bzIdQ0a3h1TQ476w1iCO7js0dpXNtzjZg6GNaTIHDxqp3YUBHHljwo8IWd+TH&#xA;tIu/IVnrEWp2Ojpd3sMF99T1a4uJr14/q8k628cMtwZjGJ4bSRjxYUqo35Y8CfAP3fj7XonmHWLj&#xA;SoYZ0hDWxci7un5lIECk83Eau3EnYtTivVjkQLaoRtKZ/PEn1mytLazLXN6soUziWGJZI7iGAfvG&#xA;joykTk1Wu4C/tDDwsxi5m0LceftVjubqCLS1mksIy92sbyuopLcRMyyiL0wqi15fGVJqVHxCmHhZ&#xA;DCO/n+xEWHnHVrgqJ7D0FKNKj+ncn1IwEIYBolMW7FaybVWoJGJig4gOq6x85Xt7o31yG0RZzfRW&#xA;EaymWJW9URkuyyRpKnEyFaFe1RsRgMUHEAa8nf4zv5biKzhsEW7cSGXnJI6J6Es8UvD04y8u9vWM&#xA;BQWBrtTHhXwhztEJ5ouHnWQC3TTVHOa4ZpKiNbaO6dxVV24y7VHbfGkeH80NpXnuS/tJZfqJguYL&#xA;O5uZ7RmJdJLdl4RN8I+3G6v9OExTLDR5sW/5yF/LiXzX5VXUtOiMmtaLylhjUVaWBqetGB3YcQ6/&#xA;Kg65LFOi3aPPwSo8i+QMyndvqn/nFLSvq/kjUtRYUe+vyi+8cEagGv8Aru+Y2Y7un7QlcwO4PR/z&#xA;L1b9E/l/5gvweLxWM6xE7UkkQxx/8OwyuAshxcEeKYHm+D8zXonYq7FXYqujjklkSKJDJJIQqIoJ&#xA;ZmJoAAOpOKvtT8lPy8/wV5Nit7pANZ1Ai51M7Eq5FEhqO0a7f63I98xMkrLodVm8Se3IM/ytxnYq&#xA;7FXYq7FXYq7FXYqhG0qxe9lvJIhJLMlvG4cBlpaSPNCwU9GWSUsD408MNsuI1S620vTLW4muba0h&#xA;huLglp5o41V3LGp5MBU1O598bQZErZdI0qVrZpbKCRrMcbRmiQmJTx2jqPgHwL08B4Y2niPepN5d&#xA;0Bnhc6ba8rfgID6MdUEQAjC7bBOI4+FBTpjZXjl3r7XRNGtJZJbWxt4JZnEkrxxIpZwSQxIHWrE/&#xA;MnxxtTMnq0NC0QW0tqNPthazv6s8Ahj9N5CQebrSjNsNzjZXjPO3SaFoskEdvJYW7W8LFooTEnBW&#xA;PUhaU3xsrxnvX3Gk6VcRiK4s4JowjRhHjRgEdldlAI6Fo1YjxAPbG1EiOrcGk6XBE8MFnBFFJH6M&#xA;kaRoqtGCzcGAG61kc0/yj4nG1Mierc2l6ZPJFJNaQSyQDjC7xoxRfBSRsNu2NoEitm0jSZonimso&#xA;JIpWSSWN4kZWeMBUZgRQlQigHtQY2kSPesn0LRZ4FgmsLeSFAgSNokKqI+XDiKbcebUp0qfHGyom&#xA;e9U/RWl+iYPqcHoFeBi9NOHHgI+PGlKcFC/IUxtHEe9TudC0S5na4uNPtprhwQ0zxI0hqoU/GRy+&#xA;yij6BjZSJkdUdgYvnD88/wAhrn6zc+avKdv6kUlZdT0mIfGrndpoFH2gerINwdxtsMjHk6F2mk1f&#xA;8Mvm8/8AJ/57+dvKWgW+haXDY/U7YyMrTQu0hMjtI3JhIoO7U6dMnLGCbcnJpITlxG2/N/59eefN&#xA;Xl+50LUls0sbsx+sYInRz6ciyKAxdv2kHbGOIA2uPRwhLiFvOMscp2KuxVdHHJLIkUSGSSQhURQS&#xA;zMTQAAdScVfTf5FfkVLo0sPmnzTCBqYAfTdNcVNuTuJZQf8Adv8AKv7PU/F9nHyZL2DqdXq+L0x5&#xA;PeModc7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8z/MP8g/J3&#xA;m+SS+hB0fWZDV722UFJGPeaH4VY/5QKt4k5ZHKQ5eHWShtzDwjzJ/wA44fmXpEjGztYtYtRXjNZy&#xA;Lzp25RScHr7Ly+eXjKC7CGtxy57MJvPIvnWzLC70DUYOH2jJaTqOtK1K0pXJ8Q73IGWB5ELrLyD5&#xA;5vmUWnl7UZuW4ZbWbjTx5caDHiHepzQHMhnnln/nGf8AMTVXR9TSHRLQkFnuHEsvHxWKItv7Oy5W&#xA;cwDjZNdAct3vn5efkp5N8lcLq3iOoayBvqdyAXUkUPooPhjHy+LxY5TLIS67Nqp5NuQZ/lbjOxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:6CFADC9075FFE211B176EAE0E827A23B</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:6DFADC9075FFE211B176EAE0E827A23B</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:6BFADC9075FFE211B176EAE0E827A23B</stRef:instanceID>
            <stRef:documentID>uuid:990B5544C2D9E2119E48DBDF293F4022</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>209.999994</stDim:w>
            <stDim:h>297.000002</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>True</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Grupo de muestras por defecto</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -182.496 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 182.496 li
589.269 182.496 li
589.269 0 li
cp
clp
[1 0 0 1 0 0 ]ct
569.339 92.2651 mo
571.298 82.7402 573.879 77.9751 577.085 77.9751 cv
578.908 77.9751 579.822 78.9331 579.822 80.8467 cv
579.822 82.0938 579.421 84.7197 578.62 88.7266 cv
577.819 92.7329 577.419 95.5156 577.419 97.0737 cv
577.419 100.724 579.443 102.549 583.495 102.549 cv
584.786 102.549 585.966 102.304 587.033 101.813 cv
588.103 101.325 588.793 100.769 589.104 100.145 cv
588.103 99.3438 li
586.944 100.591 585.831 101.213 584.764 101.213 cv
584.853 99.2549 585.32 96.3047 586.167 92.3657 cv
587.012 88.4263 587.435 85.7661 587.435 84.3857 cv
587.435 81.7598 586.701 79.7012 585.232 78.21 cv
583.763 76.7188 581.804 75.9722 579.354 75.9722 cv
576.906 75.9722 575.037 76.6514 573.746 78.0083 cv
572.454 79.3682 571.386 81.271 570.541 83.7188 cv
570.407 81.271 569.616 79.3682 568.17 78.0083 cv
566.724 76.6514 564.753 75.9722 562.261 75.9722 cv
558.743 75.9722 556.117 77.998 554.381 82.0488 cv
554.381 81.8481 li
554.381 79.979 553.824 78.5322 552.712 77.5083 cv
551.598 76.4849 550.03 75.9722 548.004 75.9722 cv
545.979 75.9722 544.298 76.7734 542.963 78.376 cv
543.964 79.1777 li
544.854 78.0649 545.967 77.4409 547.302 77.3076 cv
542.896 101.948 li
550.909 101.948 li
553.313 88.5928 li
555.183 81.5146 557.497 77.9751 560.258 77.9751 cv
562.081 77.9751 562.995 78.9331 562.995 80.8467 cv
562.995 82.0938 562.595 84.7197 561.794 88.7266 cv
560.992 92.7329 560.591 95.5156 560.591 97.0737 cv
560.591 100.724 562.616 102.549 566.669 102.549 cv
567.959 102.549 569.139 102.304 570.206 101.813 cv
571.275 101.325 571.966 100.769 572.276 100.145 cv
571.275 99.3438 li
570.117 100.591 569.005 101.213 567.937 101.213 cv
568.024 99.2993 568.493 96.3174 569.339 92.2651 cv
569.339 92.2651 li
569.339 92.2651 li
cp
524.433 82.3491 mo
526.103 78.9438 527.949 77.2412 529.976 77.2412 cv
532.001 77.2412 533.014 79.1104 533.014 82.8496 cv
533.014 87.7915 532.2 92.0542 530.577 95.6377 cv
528.951 99.2212 527.104 101.013 525.033 101.013 cv
522.964 101.013 521.929 99.2324 521.929 95.6709 cv
521.929 90.1958 522.764 85.7549 524.433 82.3491 cv
524.433 82.3491 li
cp
524.866 102.549 mo
529.942 102.549 533.825 100.991 536.52 97.8745 cv
539.212 94.7588 540.56 90.6626 540.56 85.5879 cv
540.56 82.6064 539.658 80.2573 537.854 78.543 cv
536.052 76.8306 533.536 75.9722 530.31 75.9722 cv
527.081 75.9722 524.388 76.4624 522.229 77.4409 cv
520.069 78.4199 518.456 79.7681 517.389 81.481 cv
516.32 83.1953 515.553 84.9766 515.085 86.8232 cv
514.616 88.6709 514.383 90.896 514.383 93.5005 cv
514.383 96.1055 515.273 98.2646 517.055 99.978 cv
518.834 101.692 521.438 102.549 524.866 102.549 cv
524.866 102.549 li
524.866 102.549 li
cp
508.106 89.395 mo
509.397 89.395 510.521 88.9722 511.479 88.125 cv
512.436 87.2798 512.914 86.0547 512.914 84.4526 cv
512.914 81.915 512.09 79.8677 510.443 78.3091 cv
508.796 76.7515 506.438 75.9722 503.365 75.9722 cv
498.825 75.9722 495.229 77.4746 492.581 80.48 cv
489.932 83.4849 488.608 87.6362 488.608 92.9331 cv
488.608 95.916 489.53 98.2646 491.379 99.978 cv
493.228 101.692 495.953 102.549 499.559 102.549 cv
501.473 102.549 503.208 102.226 504.768 101.581 cv
506.326 100.936 507.506 100.235 508.307 99.4775 cv
509.108 98.7202 509.843 97.752 510.51 96.5723 cv
511.179 95.3936 511.578 94.4468 511.713 93.7344 cv
510.51 93.2007 li
510.51 93.6006 510.064 94.5352 509.175 96.0049 cv
508.685 96.8062 508.106 97.5742 507.439 98.3081 cv
506.772 99.043 505.87 99.6777 504.734 100.212 cv
503.6 100.745 502.341 101.013 500.962 101.013 cv
499.581 101.013 498.434 100.535 497.522 99.5771 cv
496.61 98.6206 496.153 97.1406 496.153 95.1367 cv
496.153 89.3506 497.044 84.9863 498.825 82.0488 cv
500.604 79.1104 502.654 77.6421 504.968 77.6421 cv
507.282 77.6421 508.862 78.4199 509.709 79.979 cv
509.086 79.8013 508.574 79.7119 508.174 79.7119 cv
506.838 79.7119 505.704 80.1909 504.768 81.1475 cv
503.832 82.1055 503.365 83.2505 503.365 84.5864 cv
503.365 85.9214 503.832 87.0571 504.768 87.9922 cv
505.704 88.9268 506.816 89.395 508.106 89.395 cv
508.106 89.395 li
cp
true sop
/0 
<<
/Names [
(Cyan)
(Magenta)
(Yellow)
(Black)
]
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/TintMethod /Subtractive
/TintProc null
/MappedCSA null
/TintTransform
/0 {

} bind /Procedure add_res
/0 /Procedure get_res
>>
/CSD add_res
/0 /CSD get_res devncs
0.858823 0.85098 0.788235 1 devn
f
202.593 80.7129 mo
204.216 78.6655 205.886 77.6421 207.6 77.6421 cv
209.314 77.6421 210.605 78.1201 211.474 79.0767 cv
212.342 80.0356 212.775 81.2471 212.775 82.7163 cv
212.775 87.3906 208.302 89.7515 199.353 89.7949 cv
199.888 85.7886 200.966 82.7622 202.593 80.7129 cv
cp
213.376 93.2007 mo
213.376 93.6006 212.931 94.5352 212.041 96.0049 cv
211.55 96.8062 210.972 97.5742 210.305 98.3081 cv
209.637 99.043 208.735 99.6777 207.6 100.212 cv
206.465 100.745 205.207 101.013 203.827 101.013 cv
202.447 101.013 201.301 100.535 200.389 99.5771 cv
199.476 98.6206 199.02 97.1406 199.02 95.1367 cv
199.02 94.2017 199.063 92.9331 199.153 91.3301 cv
204.05 91.2866 207.823 90.541 210.472 89.0938 cv
213.12 87.6475 214.445 85.521 214.445 82.7163 cv
214.445 78.2207 211.617 75.9722 205.964 75.9722 cv
201.557 75.9722 198.04 77.4746 195.414 80.48 cv
192.787 83.4849 191.474 87.6362 191.474 92.9331 cv
191.474 95.916 192.398 98.2646 194.245 99.978 cv
196.092 101.692 198.819 102.549 202.425 102.549 cv
204.339 102.549 206.075 102.226 207.634 101.581 cv
209.191 100.936 210.371 100.235 211.172 99.4775 cv
211.974 98.7202 212.708 97.752 213.376 96.5723 cv
214.044 95.3936 214.445 94.4468 214.578 93.7344 cv
213.376 93.2007 li
cp
f
218.117 79.1777 mo
219.007 78.0649 220.12 77.4409 221.456 77.3076 cv
217.048 101.948 li
225.061 101.948 li
227.465 88.6597 li
227.465 88.5928 li
227.866 87.123 228.667 85.2319 229.869 82.9165 cv
230.625 81.3594 231.571 80.0684 232.707 79.0439 cv
233.842 78.02 235 77.5083 236.18 77.5083 cv
237.358 77.5083 238.25 77.7871 238.85 78.3428 cv
239.451 78.9004 239.752 79.9458 239.752 81.481 cv
239.752 83.0176 238.794 85.188 236.88 87.9922 cv
234.965 90.7964 234.009 93.0229 234.009 94.6689 cv
235.611 94.6689 li
235.611 93.5122 236.101 92.188 237.08 90.6963 cv
238.059 89.2051 239.04 87.6362 240.019 85.9888 cv
240.997 84.3423 241.488 82.7837 241.488 81.3145 cv
241.488 77.7524 239.773 75.9722 236.346 75.9722 cv
233.141 75.9722 230.537 78.0649 228.534 82.249 cv
228.534 81.8481 li
228.534 79.979 227.976 78.5322 226.864 77.5083 cv
225.751 76.4849 224.181 75.9722 222.157 75.9722 cv
220.13 75.9722 218.45 76.7734 217.115 78.376 cv
218.117 79.1777 li
218.117 79.1777 li
cp
f
243.156 98.6763 mo
243.78 98.854 244.38 98.9429 244.96 98.9429 cv
246.296 98.9429 247.386 98.4761 248.232 97.5415 cv
249.077 96.6064 249.501 95.4595 249.501 94.1016 cv
249.501 92.7441 249.066 91.6313 248.199 90.7627 cv
247.33 89.8945 246.229 89.4609 244.893 89.4609 cv
243.558 89.4609 242.399 89.8945 241.421 90.7627 cv
240.441 91.6313 239.952 93.0562 239.952 95.0366 cv
239.952 97.0186 240.809 98.7661 242.523 100.279 cv
244.236 101.792 246.763 102.549 250.102 102.549 cv
253.441 102.549 256.3 101.503 258.682 99.4097 cv
261.063 97.3188 262.254 94.6924 262.254 91.5308 cv
262.254 89.5723 261.942 87.7808 261.319 86.1553 cv
260.696 84.5313 260.007 83.2178 259.25 82.2158 cv
258.492 81.2134 257.803 79.9023 257.181 78.2759 cv
256.557 76.6514 256.245 74.8599 256.245 72.9009 cv
254.642 72.9009 li
254.174 73.6353 li
253.863 74.126 253.551 74.8818 253.24 75.9053 cv
252.928 76.9297 252.772 77.9751 252.772 79.0439 cv
252.772 79.3115 li
249.968 82.249 246.963 84.0752 243.758 84.7871 cv
243.758 86.3892 li
247.141 85.812 250.191 84.1196 252.906 81.3145 cv
252.995 81.8481 253.274 83.207 253.741 85.3872 cv
254.208 87.5684 254.442 89.4609 254.442 91.064 cv
254.442 97.5635 252.238 100.813 247.832 100.813 cv
245.694 100.813 244.135 100.101 243.156 98.6763 cv
243.156 98.6763 li
243.156 98.6763 li
cp
f
280.984 95.6377 mo
279.359 99.2212 277.513 101.013 275.442 101.013 cv
273.373 101.013 272.337 99.2324 272.337 95.6709 cv
272.337 90.1958 273.172 85.7549 274.842 82.3491 cv
276.511 78.9438 278.358 77.2412 280.384 77.2412 cv
282.409 77.2412 283.422 79.1104 283.422 82.8496 cv
283.422 87.7915 282.609 92.0542 280.984 95.6377 cv
cp
288.264 78.543 mo
286.461 76.8306 283.944 75.9722 280.718 75.9722 cv
277.489 75.9722 274.796 76.4624 272.638 77.4409 cv
270.478 78.4199 268.865 79.7681 267.797 81.481 cv
266.729 83.1953 265.961 84.9766 265.493 86.8232 cv
265.026 88.6709 264.792 90.896 264.792 93.5005 cv
264.792 96.1055 265.682 98.2646 267.463 99.978 cv
269.243 101.692 271.847 102.549 275.276 102.549 cv
280.351 102.549 284.233 100.991 286.929 97.8745 cv
289.621 94.7588 290.969 90.6626 290.969 85.5879 cv
290.969 82.6064 290.066 80.2573 288.264 78.543 cv
cp
f
320.147 92.3657 mo
320.994 88.4263 321.417 85.7661 321.417 84.3857 cv
321.417 81.7598 320.683 79.7012 319.213 78.21 cv
317.743 76.7188 315.696 75.9722 313.07 75.9722 cv
309.197 75.9722 306.347 78.0649 304.522 82.249 cv
304.522 81.8481 li
304.522 79.979 303.966 78.5322 302.854 77.5083 cv
301.74 76.4849 300.17 75.9722 298.146 75.9722 cv
296.119 75.9722 294.439 76.7734 293.104 78.376 cv
294.105 79.1777 li
294.996 78.0649 296.108 77.4409 297.444 77.3076 cv
295.242 89.6611 li
294.528 93.9351 294.173 96.3838 294.173 97.0068 cv
294.173 98.6538 294.74 99.9893 295.876 101.013 cv
297.01 102.037 298.58 102.549 300.584 102.549 cv
302.587 102.549 304.256 101.747 305.591 100.145 cv
304.589 99.3438 li
303.699 100.456 302.563 101.08 301.184 101.213 cv
303.455 88.7266 li
304.344 85.3872 305.468 82.7622 306.827 80.8467 cv
308.184 78.9331 309.599 77.9751 311.066 77.9751 cv
312.892 77.9751 313.804 78.9331 313.804 80.8467 cv
313.804 82.0938 313.403 84.7197 312.603 88.7266 cv
311.802 92.7329 311.399 95.5156 311.399 97.0737 cv
311.399 100.724 313.426 102.549 317.477 102.549 cv
318.767 102.549 319.948 102.304 321.017 101.813 cv
322.085 101.325 322.775 100.769 323.087 100.145 cv
322.085 99.3438 li
320.926 100.591 319.814 101.213 318.746 101.213 cv
318.835 99.2549 319.302 96.3047 320.147 92.3657 cv
320.147 92.3657 li
cp
f
343.152 89.3608 mo
342.772 91.5635 342.518 92.9565 342.384 93.5342 cv
341.492 95.8491 340.314 97.7642 338.846 99.2769 cv
337.731 100.435 336.641 101.013 335.572 101.013 cv
334.504 101.013 333.714 100.624 333.202 99.8447 cv
332.689 99.0654 332.435 97.6748 332.435 95.6709 cv
332.435 91.4424 333.102 87.3799 334.438 83.4849 cv
335.773 79.5898 337.531 77.6421 339.712 77.6421 cv
340.914 77.6421 341.917 78.2646 342.718 79.5112 cv
343.519 80.7588 343.985 82.2275 344.119 83.918 cv
343.853 85.3438 343.529 87.1567 343.152 89.3608 cv
cp
349.128 101.213 mo
353.735 75.9722 li
352.867 76.1729 li
351.265 76.4399 348.816 76.5737 345.521 76.5737 cv
345.255 77.9082 345.01 79.2441 344.788 80.5796 cv
343.72 77.5083 341.56 75.9722 338.311 75.9722 cv
334.348 75.9722 331.121 77.4199 328.628 80.313 cv
326.134 83.207 324.889 87.1904 324.889 92.2651 cv
324.889 95.5156 325.768 98.0415 327.525 99.8447 cv
329.284 101.647 331.655 102.549 334.638 102.549 cv
337.619 102.549 340.091 100.835 342.051 97.4077 cv
342.406 100.835 344.543 102.549 348.46 102.549 cv
350.464 102.549 352.134 101.747 353.468 100.145 cv
352.467 99.3438 li
351.575 100.456 350.464 101.08 349.128 101.213 cv
cp
f
369.795 96.6392 mo
370.351 95.4595 370.696 94.5591 370.83 93.9351 cv
369.628 93.4009 li
368.893 95.4043 li
368.447 96.6953 367.691 97.9863 366.623 99.2769 cv
365.555 100.568 364.396 101.213 363.15 101.213 cv
364.619 93.2896 366.099 84.709 367.591 75.4717 cv
369.082 66.2349 369.85 61.0371 369.895 59.8789 cv
370.963 59.8789 371.865 60.4585 372.599 61.6152 cv
373.333 62.7739 373.701 64.1533 373.701 65.7559 cv
373.701 68.3828 372.766 71.8887 370.896 76.2725 cv
369.026 80.6582 368.092 84.0298 368.092 86.3892 cv
369.294 86.3892 li
369.294 84.2969 370.239 80.9805 372.132 76.4399 cv
374.023 71.8994 374.97 68.4048 374.97 65.9565 cv
374.97 63.5088 374.445 61.6826 373.4 60.4805 cv
372.353 59.2788 371.03 58.6768 369.428 58.6768 cv
367.111 58.6768 365.254 59.6118 363.852 61.4824 cv
362.449 63.3516 361.348 66.4902 360.547 70.8975 cv
356.206 94.9365 li
356.116 95.7373 356.072 96.3174 356.072 96.6729 cv
356.072 98.542 356.628 99.9893 357.742 101.013 cv
358.854 102.037 360.213 102.549 361.815 102.549 cv
363.418 102.549 364.72 102.236 365.721 101.614 cv
366.723 100.991 367.512 100.301 368.092 99.5435 cv
368.67 98.7876 369.237 97.8193 369.795 96.6392 cv
369.795 96.6392 li
cp
f
385.454 100.145 mo
384.452 99.3438 li
383.562 100.456 382.448 101.08 381.113 101.213 cv
385.72 75.9722 li
384.786 76.1729 li
383.227 76.4399 380.802 76.5737 377.507 76.5737 cv
374.636 76.5737 li
374.502 77.7759 li
377.307 77.7759 li
375.104 89.728 li
374.391 94.0015 374.035 96.4277 374.035 97.0068 cv
374.035 98.6538 374.603 99.9893 375.737 101.013 cv
376.872 102.037 378.442 102.549 380.445 102.549 cv
382.448 102.549 384.118 101.747 385.454 100.145 cv
385.454 100.145 li
385.454 100.145 li
cp
f
382.982 70.9644 mo
384.318 70.9644 385.464 70.4966 386.422 69.5615 cv
387.379 68.6265 387.856 67.4917 387.856 66.1558 cv
387.856 64.8213 387.379 63.6748 386.422 62.7168 cv
385.464 61.7607 384.318 61.2817 382.982 61.2817 cv
381.648 61.2817 380.512 61.7607 379.577 62.7168 cv
378.643 63.6748 378.175 64.8213 378.175 66.1558 cv
378.175 67.4917 378.643 68.6265 379.577 69.5615 cv
380.512 70.4966 381.648 70.9644 382.982 70.9644 cv
382.982 70.9644 li
cp
f
415.169 92.3657 mo
416.014 88.4263 416.436 85.7661 416.436 84.3857 cv
416.436 81.7598 415.702 79.7012 414.232 78.21 cv
412.764 76.7188 410.715 75.9722 408.089 75.9722 cv
404.217 75.9722 401.367 78.0649 399.543 82.249 cv
399.543 81.8481 li
399.543 79.979 398.984 78.5322 397.872 77.5083 cv
396.76 76.4849 395.189 75.9722 393.165 75.9722 cv
391.139 75.9722 389.459 76.7734 388.124 78.376 cv
389.125 79.1777 li
390.016 78.0649 391.128 77.4409 392.464 77.3076 cv
390.262 89.6611 li
389.548 93.9351 389.192 96.3838 389.192 97.0068 cv
389.192 98.6538 389.76 99.9893 390.895 101.013 cv
392.029 102.037 393.601 102.549 395.603 102.549 cv
397.604 102.549 399.275 101.747 400.611 100.145 cv
399.608 99.3438 li
398.718 100.456 397.583 101.08 396.203 101.213 cv
398.475 88.7266 li
399.364 85.3872 400.488 82.7622 401.846 80.8467 cv
403.203 78.9331 404.616 77.9751 406.086 77.9751 cv
407.911 77.9751 408.824 78.9331 408.824 80.8467 cv
408.824 82.0938 408.423 84.7197 407.622 88.7266 cv
406.821 92.7329 406.421 95.5156 406.421 97.0737 cv
406.421 100.724 408.444 102.549 412.496 102.549 cv
413.787 102.549 414.967 102.304 416.035 101.813 cv
417.104 101.325 417.793 100.769 418.106 100.145 cv
417.104 99.3438 li
415.947 100.591 414.834 101.213 413.766 101.213 cv
413.854 99.2549 414.321 96.3047 415.169 92.3657 cv
415.169 92.3657 li
cp
f
438.939 83.8521 mo
437.536 91.5308 li
437.18 92.5107 436.746 93.5244 436.234 94.5688 cv
435.723 95.6147 434.888 96.7393 433.729 97.9409 cv
432.573 99.1436 431.437 99.7446 430.325 99.7446 cv
429.212 99.7446 428.455 99.3999 428.055 98.709 cv
427.654 98.019 427.454 96.6504 427.454 94.6025 cv
427.454 90.7744 428.075 86.9238 429.323 83.0513 cv
430.569 79.1777 431.905 77.2412 433.33 77.2412 cv
437.07 77.2412 438.939 79.2891 438.939 83.3843 cv
438.939 83.8521 li
cp
426.986 112.899 mo
424.805 112.899 423.069 112.542 421.777 111.831 cv
420.486 111.117 419.842 110.161 419.842 108.959 cv
419.842 107.758 420.23 106.845 421.011 106.222 cv
421.788 105.598 422.823 105.287 424.115 105.287 cv
425.405 105.287 426.386 105.354 427.053 105.487 cv
427.454 105.576 427.809 105.654 428.121 105.72 cv
428.433 105.788 428.822 105.91 429.29 106.087 cv
429.758 106.265 430.102 106.388 430.325 106.455 cv
430.548 106.521 430.902 106.666 431.394 106.89 cv
431.884 107.112 432.184 107.257 432.295 107.323 cv
432.405 107.39 432.729 107.557 433.263 107.824 cv
434.198 108.292 li
432.951 111.362 430.548 112.899 426.986 112.899 cv
cp
441.877 109.226 mo
441.165 109.226 440.52 109.159 439.94 109.026 cv
441.945 106.89 443.279 104.084 443.947 100.612 cv
448.354 75.9722 li
447.486 76.1729 li
445.972 76.4399 443.567 76.5737 440.273 76.5737 cv
439.673 79.8457 li
439.317 79.0439 438.961 78.4424 438.604 78.042 cv
437.357 76.6626 435.601 75.9722 433.33 75.9722 cv
429.411 75.9722 426.195 77.4858 423.681 80.5132 cv
421.167 83.541 419.908 87.5469 419.908 92.5322 cv
419.908 98.4985 422.936 101.48 428.99 101.48 cv
432.15 101.48 434.731 99.6333 436.735 95.938 cv
434.666 107.022 li
430.659 105.019 427.431 104.019 424.982 104.019 cv
422.534 104.019 420.831 104.474 419.875 105.387 cv
418.916 106.298 418.439 107.523 418.439 109.059 cv
418.439 110.596 419.207 111.841 420.743 112.799 cv
422.279 113.755 424.449 114.235 427.253 114.235 cv
431.971 114.235 435.845 112.854 438.872 110.095 cv
439.896 110.316 440.897 110.428 441.877 110.428 cv
444.191 110.428 445.883 109.671 446.951 108.158 cv
446.017 107.357 li
444.858 108.602 443.479 109.226 441.877 109.226 cv
cp
f
467.856 105.125 mo
476.663 105.125 483.802 97.9863 483.802 89.1807 cv
483.802 80.374 476.663 73.2354 467.856 73.2354 cv
459.051 73.2354 451.911 80.374 451.911 89.1807 cv
451.911 97.9863 459.051 105.125 467.856 105.125 cv
467.856 105.125 li
cp
false sop
0.580392 0.976471 0.368627 0.368627 cmyk
f
91.2456 182.496 mo
141.641 182.496 182.496 141.64 182.496 91.2505 cv
182.496 40.856 141.641 0 91.2456 0 cv
40.8521 0 0 40.856 0 91.2505 cv
0 141.64 40.8521 182.496 91.2456 182.496 cv
91.2456 182.496 li
cp
f
108.853 99.6367 mo
103.609 111.452 97.481 117.357 90.4692 117.357 cv
83.4536 117.357 78.6914 114.553 76.1831 108.939 cv
84.1558 65.5278 li
84.3779 65.5278 li
84.3779 64.938 85.2646 62.6846 87.0352 58.7695 cv
88.8076 54.8608 91.6484 50.6865 95.563 46.2544 cv
99.4736 41.8257 103.276 39.6113 106.97 39.6113 cv
110.66 39.6113 113.207 40.8647 114.612 43.3779 cv
116.014 45.8901 116.717 50.5391 116.717 57.3296 cv
116.717 73.7197 114.094 87.8257 108.853 99.6367 cv
cp
133.771 43.043 mo
128.457 37.3628 120.776 34.5176 110.735 34.5176 cv
100.692 34.5176 92.4248 40.0562 85.9277 51.1294 cv
85.6304 45.3701 83.6377 40.9067 79.9482 37.7266 cv
76.2544 34.5552 71.1221 32.9678 64.5532 32.9678 cv
57.9819 32.9678 52.4819 35.625 48.0522 40.939 cv
51.3755 43.5986 li
54.3267 39.9077 58.02 37.8394 62.4497 37.3965 cv
41.6289 153.46 li
67.9873 153.46 li
74.6318 117.8 li
78.6187 120.901 84.0068 122.451 90.8018 122.451 cv
105.863 122.451 118.118 117.467 127.57 107.5 cv
137.019 97.5317 141.745 83.8394 141.745 66.4121 cv
141.745 56.5229 139.087 48.7314 133.771 43.043 cv
cp
true sop
/0 /CSD get_res devncs
0 0 0 0 devn
f
339.565 125.444 mo
340.058 125.444 li
340.292 134.209 li
339.331 134.209 li
339.565 125.444 li
cp
339.17 123.03 mo
339.17 122.503 339.385 122.239 339.815 122.239 cv
340.257 122.239 340.478 122.503 340.478 123.03 cv
340.478 123.315 340.414 123.521 340.288 123.644 cv
340.161 123.768 340.004 123.83 339.815 123.83 cv
339.633 123.83 339.479 123.768 339.355 123.644 cv
339.231 123.521 339.17 123.315 339.17 123.03 cv
cp
false sop
0.580392 0.976471 0.368627 0.368627 cmyk
f
346.547 131.183 mo
345.716 131.183 li
345.716 120.157 li
341.882 120.157 li
341.882 119.382 li
350.381 119.382 li
350.381 120.157 li
346.547 120.157 li
346.547 131.183 li
cp
f
360.81 119.382 mo
360.81 127.018 li
360.81 128.374 360.417 129.434 359.631 130.198 cv
358.846 130.962 357.75 131.344 356.346 131.344 cv
354.979 131.344 353.912 130.961 353.146 130.194 cv
352.379 129.427 351.995 128.357 351.995 126.985 cv
351.995 119.382 li
352.827 119.382 li
352.827 127.018 li
352.827 128.153 353.142 129.037 353.771 129.669 cv
354.4 130.302 355.291 130.617 356.442 130.617 cv
357.567 130.617 358.439 130.307 359.058 129.686 cv
359.677 129.063 359.986 128.201 359.986 127.099 cv
359.986 119.382 li
360.81 119.382 li
cp
f
369.139 125.598 mo
370.761 125.598 li
372.09 125.598 373.051 125.378 373.643 124.939 cv
374.234 124.501 374.53 123.789 374.53 122.805 cv
374.53 121.896 374.25 121.222 373.69 120.782 cv
373.131 120.344 372.265 120.125 371.092 120.125 cv
369.139 120.125 li
369.139 125.598 li
cp
375.418 122.772 mo
375.418 123.913 375.03 124.787 374.256 125.396 cv
373.481 126.004 372.383 126.308 370.963 126.308 cv
369.139 126.308 li
369.139 131.183 li
368.315 131.183 li
368.315 119.382 li
371.205 119.382 li
374.014 119.382 375.418 120.513 375.418 122.772 cv
cp
f
384.435 131.183 mo
377.985 131.183 li
377.985 119.382 li
384.435 119.382 li
384.435 120.142 li
378.809 120.142 li
378.809 124.604 li
384.119 124.604 li
384.119 125.363 li
378.809 125.363 li
378.809 130.424 li
384.435 130.424 li
384.435 131.183 li
cp
f
387.929 125.331 mo
390.181 125.331 li
391.176 125.331 391.948 125.109 392.497 124.665 cv
393.046 124.221 393.32 123.566 393.32 122.699 cv
393.32 121.801 393.051 121.147 392.513 120.738 cv
391.975 120.329 391.098 120.125 389.882 120.125 cv
387.929 120.125 li
387.929 125.331 li
cp
387.929 126.041 mo
387.929 131.183 li
387.105 131.183 li
387.105 119.382 li
389.914 119.382 li
391.378 119.382 392.459 119.653 393.159 120.193 cv
393.858 120.734 394.208 121.548 394.208 122.635 cv
394.208 123.426 394 124.094 393.583 124.637 cv
393.166 125.181 392.532 125.57 391.682 125.807 cv
394.886 131.183 li
393.901 131.183 li
390.858 126.041 li
387.929 126.041 li
cp
f
403.442 128.14 mo
403.442 129.124 403.08 129.904 402.356 130.48 cv
401.633 131.057 400.671 131.344 399.471 131.344 cv
398.029 131.344 396.923 131.186 396.153 130.868 cv
396.153 130.045 li
397.004 130.405 398.088 130.585 399.406 130.585 cv
400.375 130.585 401.144 130.363 401.711 129.92 cv
402.278 129.476 402.563 128.894 402.563 128.172 cv
402.563 127.726 402.468 127.355 402.28 127.063 cv
402.092 126.769 401.785 126.501 401.359 126.259 cv
400.935 126.017 400.311 125.756 399.487 125.477 cv
398.282 125.062 397.449 124.614 396.989 124.132 cv
396.529 123.65 396.299 123.009 396.299 122.207 cv
396.299 121.325 396.645 120.605 397.336 120.048 cv
398.027 119.491 398.917 119.213 400.004 119.213 cv
401.112 119.213 402.153 119.423 403.127 119.843 cv
402.829 120.553 li
401.85 120.144 400.913 119.938 400.02 119.938 cv
399.148 119.938 398.454 120.142 397.938 120.545 cv
397.421 120.948 397.163 121.497 397.163 122.191 cv
397.163 122.627 397.242 122.985 397.4 123.265 cv
397.56 123.545 397.819 123.796 398.18 124.02 cv
398.54 124.242 399.159 124.511 400.036 124.822 cv
400.956 125.14 401.647 125.448 402.11 125.746 cv
402.573 126.045 402.911 126.384 403.123 126.764 cv
403.336 127.143 403.442 127.602 403.442 128.14 cv
cp
f
406.203 125.267 mo
406.203 126.956 406.579 128.262 407.333 129.185 cv
408.086 130.107 409.168 130.569 410.577 130.569 cv
411.998 130.569 413.084 130.112 413.834 129.197 cv
414.585 128.282 414.96 126.972 414.96 125.267 cv
414.96 123.566 414.585 122.263 413.834 121.355 cv
413.084 120.449 412.003 119.995 410.594 119.995 cv
409.189 119.995 408.106 120.453 407.345 121.368 cv
406.583 122.282 406.203 123.582 406.203 125.267 cv
cp
415.856 125.267 mo
415.856 127.139 415.388 128.62 414.452 129.71 cv
413.516 130.799 412.224 131.344 410.577 131.344 cv
408.937 131.344 407.647 130.799 406.711 129.71 cv
405.775 128.62 405.307 127.134 405.307 125.25 cv
405.307 123.372 405.779 121.894 406.724 120.814 cv
407.668 119.736 408.958 119.197 410.594 119.197 cv
412.24 119.197 413.528 119.739 414.46 120.823 cv
415.391 121.907 415.856 123.389 415.856 125.267 cv
cp
f
427.148 131.183 mo
426.316 131.183 li
419.327 120.706 li
419.263 120.706 li
419.327 121.954 419.359 122.896 419.359 123.531 cv
419.359 131.183 li
418.568 131.183 li
418.568 119.382 li
419.392 119.382 li
426.373 129.843 li
426.422 129.843 li
426.373 128.874 426.349 127.954 426.349 127.082 cv
426.349 119.382 li
427.148 119.382 li
427.148 131.183 li
cp
f
431.676 126.275 mo
435.896 126.275 li
434.291 122.021 li
434.156 121.688 433.995 121.226 433.807 120.634 cv
433.661 121.149 433.502 121.618 433.33 122.038 cv
431.676 126.275 li
cp
436.171 127.018 mo
431.377 127.018 li
429.73 131.183 li
428.818 131.183 li
433.564 119.334 li
434.089 119.334 li
438.738 131.183 li
437.81 131.183 li
436.171 127.018 li
cp
f
440.409 131.183 mo
440.409 119.382 li
441.232 119.382 li
441.232 130.408 li
446.858 130.408 li
446.858 131.183 li
440.409 131.183 li
cp
f
459.7 128.14 mo
459.7 129.124 459.338 129.904 458.614 130.48 cv
457.891 131.057 456.929 131.344 455.729 131.344 cv
454.287 131.344 453.181 131.186 452.411 130.868 cv
452.411 130.045 li
453.262 130.405 454.346 130.585 455.664 130.585 cv
456.633 130.585 457.401 130.363 457.969 129.92 cv
458.536 129.476 458.82 128.894 458.82 128.172 cv
458.82 127.726 458.726 127.355 458.538 127.063 cv
458.35 126.769 458.043 126.501 457.617 126.259 cv
457.192 126.017 456.568 125.756 455.745 125.477 cv
454.54 125.062 453.707 124.614 453.247 124.132 cv
452.787 123.65 452.557 123.009 452.557 122.207 cv
452.557 121.325 452.902 120.605 453.594 120.048 cv
454.285 119.491 455.175 119.213 456.262 119.213 cv
457.37 119.213 458.411 119.423 459.385 119.843 cv
459.087 120.553 li
458.107 120.144 457.171 119.938 456.277 119.938 cv
455.406 119.938 454.712 120.142 454.195 120.545 cv
453.679 120.948 453.421 121.497 453.421 122.191 cv
453.421 122.627 453.5 122.985 453.658 123.265 cv
453.817 123.545 454.077 123.796 454.438 124.02 cv
454.798 124.242 455.417 124.511 456.294 124.822 cv
457.214 125.14 457.905 125.448 458.368 125.746 cv
458.831 126.045 459.169 126.384 459.381 126.764 cv
459.594 127.143 459.7 127.602 459.7 128.14 cv
cp
f
470.742 131.183 mo
469.91 131.183 li
469.91 125.379 li
463.018 125.379 li
463.018 131.183 li
462.194 131.183 li
462.194 119.382 li
463.018 119.382 li
463.018 124.62 li
469.91 124.62 li
469.91 119.382 li
470.742 119.382 li
470.742 131.183 li
cp
f
474.35 125.267 mo
474.35 126.956 474.726 128.262 475.479 129.185 cv
476.232 130.107 477.314 130.569 478.724 130.569 cv
480.145 130.569 481.23 130.112 481.98 129.197 cv
482.731 128.282 483.106 126.972 483.106 125.267 cv
483.106 123.566 482.731 122.263 481.98 121.355 cv
481.23 120.449 480.149 119.995 478.74 119.995 cv
477.336 119.995 476.253 120.453 475.491 121.368 cv
474.729 122.282 474.35 123.582 474.35 125.267 cv
cp
484.003 125.267 mo
484.003 127.139 483.534 128.62 482.599 129.71 cv
481.662 130.799 480.37 131.344 478.724 131.344 cv
477.083 131.344 475.794 130.799 474.857 129.71 cv
473.922 128.62 473.453 127.134 473.453 125.25 cv
473.453 123.372 473.926 121.894 474.87 120.814 cv
475.814 119.736 477.104 119.197 478.74 119.197 cv
480.387 119.197 481.675 119.739 482.606 120.823 cv
483.537 121.907 484.003 123.389 484.003 125.267 cv
cp
f
487.538 125.598 mo
489.16 125.598 li
490.489 125.598 491.45 125.378 492.042 124.939 cv
492.634 124.501 492.93 123.789 492.93 122.805 cv
492.93 121.896 492.649 121.222 492.09 120.782 cv
491.53 120.344 490.664 120.125 489.491 120.125 cv
487.538 120.125 li
487.538 125.598 li
cp
493.817 122.772 mo
493.817 123.913 493.43 124.787 492.655 125.396 cv
491.881 126.004 490.782 126.308 489.362 126.308 cv
487.538 126.308 li
487.538 131.183 li
486.715 131.183 li
486.715 119.382 li
489.604 119.382 li
492.413 119.382 493.817 120.513 493.817 122.772 cv
cp
f
497.207 125.598 mo
498.829 125.598 li
500.158 125.598 501.119 125.378 501.711 124.939 cv
502.303 124.501 502.599 123.789 502.599 122.805 cv
502.599 121.896 502.318 121.222 501.759 120.782 cv
501.199 120.344 500.333 120.125 499.16 120.125 cv
497.207 120.125 li
497.207 125.598 li
cp
503.486 122.772 mo
503.486 123.913 503.099 124.787 502.324 125.396 cv
501.55 126.004 500.451 126.308 499.031 126.308 cv
497.207 126.308 li
497.207 131.183 li
496.384 131.183 li
496.384 119.382 li
499.273 119.382 li
502.082 119.382 503.486 120.513 503.486 122.772 cv
cp
f
512.503 131.183 mo
506.054 131.183 li
506.054 119.382 li
512.503 119.382 li
512.503 120.142 li
506.877 120.142 li
506.877 124.604 li
512.188 124.604 li
512.188 125.363 li
506.877 125.363 li
506.877 130.424 li
512.503 130.424 li
512.503 131.183 li
cp
f
515.998 125.331 mo
518.25 125.331 li
519.245 125.331 520.018 125.109 520.566 124.665 cv
521.115 124.221 521.39 123.566 521.39 122.699 cv
521.39 121.801 521.12 121.147 520.582 120.738 cv
520.044 120.329 519.167 120.125 517.951 120.125 cv
515.998 120.125 li
515.998 125.331 li
cp
515.998 126.041 mo
515.998 131.183 li
515.175 131.183 li
515.175 119.382 li
517.983 119.382 li
519.447 119.382 520.528 119.653 521.229 120.193 cv
521.928 120.734 522.277 121.548 522.277 122.635 cv
522.277 123.426 522.069 124.094 521.652 124.637 cv
521.235 125.181 520.602 125.57 519.751 125.807 cv
522.955 131.183 li
521.971 131.183 li
518.928 126.041 li
515.998 126.041 li
cp
f
537.354 125.202 mo
537.354 123.512 536.925 122.241 536.066 121.388 cv
535.208 120.535 533.948 120.108 532.285 120.108 cv
530.114 120.108 li
530.114 130.456 li
532.067 130.456 li
535.592 130.456 537.354 128.705 537.354 125.202 cv
cp
538.25 125.17 mo
538.25 127.149 537.73 128.646 536.692 129.661 cv
535.653 130.676 534.128 131.183 532.116 131.183 cv
529.291 131.183 li
529.291 119.382 li
532.479 119.382 li
534.362 119.382 535.795 119.874 536.777 120.859 cv
537.759 121.844 538.25 123.28 538.25 125.17 cv
cp
f
540.962 131.183 mo
540.962 119.382 li
541.785 119.382 li
541.785 131.183 li
540.962 131.183 li
cp
f
549.768 125.234 mo
554.118 125.234 li
554.118 130.617 li
552.978 131.102 551.694 131.344 550.269 131.344 cv
548.406 131.344 546.979 130.818 545.986 129.766 cv
544.993 128.714 544.497 127.225 544.497 125.299 cv
544.497 124.099 544.743 123.034 545.235 122.106 cv
545.729 121.178 546.433 120.461 547.351 119.956 cv
548.268 119.45 549.321 119.197 550.511 119.197 cv
551.797 119.197 552.95 119.434 553.973 119.907 cv
553.643 120.649 li
552.62 120.177 551.56 119.938 550.462 119.938 cv
548.907 119.938 547.674 120.42 546.762 121.38 cv
545.85 122.341 545.394 123.636 545.394 125.267 cv
545.394 127.042 545.826 128.378 546.692 129.273 cv
547.559 130.17 548.832 130.617 550.511 130.617 cv
551.598 130.617 552.521 130.464 553.279 130.157 cv
553.279 126.009 li
549.768 126.009 li
549.768 125.234 li
cp
f
557.081 131.183 mo
557.081 119.382 li
557.904 119.382 li
557.904 131.183 li
557.081 131.183 li
cp
f
564.321 131.183 mo
563.49 131.183 li
563.49 120.157 li
559.656 120.157 li
559.656 119.382 li
568.155 119.382 li
568.155 120.157 li
564.321 120.157 li
564.321 131.183 li
cp
f
571.093 126.275 mo
575.313 126.275 li
573.708 122.021 li
573.573 121.688 573.412 121.226 573.224 120.634 cv
573.078 121.149 572.919 121.618 572.747 122.038 cv
571.093 126.275 li
cp
575.588 127.018 mo
570.794 127.018 li
569.147 131.183 li
568.235 131.183 li
572.981 119.334 li
573.506 119.334 li
578.155 131.183 li
577.227 131.183 li
575.588 127.018 li
cp
f
579.826 131.183 mo
579.826 119.382 li
580.649 119.382 li
580.649 130.408 li
586.275 130.408 li
586.275 131.183 li
579.826 131.183 li
cp
f
588.865 128.14 mo
588.373 128.14 li
588.139 119.382 li
589.1 119.382 li
588.865 128.14 li
cp
587.961 130.553 mo
587.961 130.025 588.177 129.762 588.607 129.762 cv
589.048 129.762 589.269 130.025 589.269 130.553 cv
589.269 131.08 589.048 131.344 588.607 131.344 cv
588.177 131.344 587.961 131.08 587.961 130.553 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
[/Procedure [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.1%%For: (Guest User) ()%%Title: (Logo.eps)%%CreationDate: 8/5/13 3:28 PM%AI9_DataStream%Gb"-6f6T3a[OBc]^cR'`Cbh9SJ.3h1)r'$'*&+(&A!9TRF3Sj4hs#OOY&F&mooLX><CIL3caCC2pO>C3PtFC^)HduAhk(i@7_Sfb%1H5;7dS"q$2W7@9Zo>hj*l#J<^Cb+u)DRC"GokLo;'],;@LPUX:nNYc"A?U)KlM;k'M%ckFPIUDZi#&%T$EMUr*SiRpS.Tm:YOYq%EA/70l-0[kh&h\B>>;IsrIJ&h:P\>J=,7HeN20Xf7=W[r>RW^R2!JR"&f&kIgu@]0RY"SfGH&)5l4+RmYmtW.^$6.Mcd2csKtfRb%q&BS>*C5+t?TaqGqj6pf0g<GF'TKj=!Y9c@oK2"X]n,>cnZtHL:WKY)$!'tE:'U*rLiG`fHn5<S,@WLUF/GRMI2F!-9Cag#ju>"]%_utf!]Q'H@!2*-p0@eZn./qU1s%ELR])C$(4St:2?gi1bZt60,7fV@rLkGaA_Bi;;c]BlQ(O53?c!hejDb'c:2"5<]O;bVGpV_Vf%KNfl7g'B\Ar^U^q;MA_0qC0^@(rh3I]K[G`]f[H&K'B8Brt;4JJ?+MdC6%b%^S<'<n?TD$>lrN;J/FFm-nio1J-l]26$Tqn$r;U.%22mtiN@:n2.fFLWafB.UZTh()IH+MmBtpRj/dIA/+1SQmYPTt$s.t1]OQU\),ki8!/UsJ%6P-M\#!a`"HMR(Bblpq-56l9a!l>h6%5G`#XGPhSM?VI9Pj56u^1":r7K/PlZp^,iX%i4Z54<6(%e^;Fi'?Kme*RWW3U+-*6??O!$mQB\BjP,<)Hdj"X?cV#i5c6aY?\5P+%IhHj>X3j?\RsK/)`U(e&*01?OLfDu1muP'>^tTO9^&DgLR-hXb'K8>^pgpC,&Z=+OY`CeEWP2_3:dq,RT+/EhSpu;f&P'O&#.1b)%!QBpP4VY:t"Q95-+FLi5FeG'M^q^IX)sA[I/Vp_n&ne6aJ8$"q5H!nj=24'ST5GTJH_C`5UCZtaN1DT<:*E9@_@B8`k\;B:a`2ca%j*CZc<M8;bHTDuCP9GQhEs3;dp-0F,j0)m(4Qt+GcqX\1MF'PJ#+F-Y410i)rm;h\J;"r#rZ#ted`^M8GW8h+Xgdt_jq]c2pM'N^%!6`''.Yo1nUrH"^C7njPoZ)4G#GAlRY=5kOqj75(Hg64N#4597lG_k>)43(SD(kf!60JB\)2;\l=G;uQJ]u_=ok;iXgop[.+?`#:%IK%gu9UPVNB`.$!s6q?uJ`llS$GHC',3q,MNF0,LU,V(g2u6pELe9PAHfZDMAWHaQ[%ZEtj(.:CeK;(<6Mp9hr&B<^hb`sCQgnC,%T3hnC%n[p]4Lj4=-XL`/&A6%)D]GVYro.A%\@"W(`'h:%!7`UZ:=hQ[\uE0\n/rhPm4m7-orb3a;ZSE9YCl]j1hB/Odb&N89dZ;S%Udl'\U1XBX\JQ5?("tJspK''b$gi5oj);o%h`qG1=20YE[eB>Hl1`(am1P@BbD4-p^qYVV&Nl)*`1HZa$fJoFO;Cm@JoLR9VhlG$%YH-4P!Ztl$Nhe_#2dQ[3W)(g]r3(r*4UiBkB!";Oe(HHp<WcM1Hd#=ZO7ltTe4&ITRsH=;8u\97PF:C]s%r'@^gqJ:R)-<0,PKo#%7]@:$B?/Qe@gA?B0fC-a0_-me+BFP!?[G;l^Ek3t7ngE2J%seWLi*KJjfJI!N8@jak2YFX`TmJeUfd0uf7QFjh37Ee7u,2h)]:b/%k5gLO--*ck0;'uu6!a<d!gh1rrqm;X`r@_3bQe%6s)_BpLQ^[V@XDKId_FS]m9fn#kTtL(`X(qRd<pfLcS%5?6EU(0N[qpR0oG)G%<TEq^hj],+)4"OtT,eYQbRdg7l!LThb!/$)+M$9PlnFCDGRi;":&LAO!H^8q>(5X!5kSWTf,-0<>nJ_arStI21t4bGKqUJEpV7Ks%[NEAPrRgS\Ym35;V5oPI#_dl:<Kcu(cb)IeE"^3L\bB$[iaHpT#_d'#<Pa#*cG$qMmFba7pA`r</EbQLWZ2uH6`p&eoQJTM!VBEY%$\Y5LX2TGfn=9S*.#-_mm%Kd"ds5T]T(]g&[+sf?!/,qM8lojnD3&:m2G?C10,S-4kFM;G/_=JG#s)MP,RO-4d4P-mib,H2<U8kk%7Wf_RfrWm.dP)F/WAkQhIu)sYpoh6;f^$l<Sc59Hs%AnA\Oia##.F"^S%$riI4j6GU:3=X.$T9LJ7rE'rVulS,O\Iqp"LleH9:D9%Jc$4FZt`<A%2>^<Qf_W!D's2@[7"8OGLE'J)mfN_0kb@`@FbT3&n[?t>d8nqU78N:4]BPAp?]h!e/n6nWQQ_)eXQ2@;@t.?5VK#b%_e#n*ls`.Z.9X%GRo+u#`'L4_#@ph34M4jbiMT`9?EI?LGM<4Q5(-^bKdQ@d&6'O^KPm4bmtWq;;r#da+"6hDolf&Ap8BJo1UR,r%O;*?H8G(2YSD;X_n_tWZJWVjU-OQ9%rt)(A'STi_6?geKi$FS<pb/<=:Va1!FhfhXa4$X4>=Q@dIQ<u=*g:p0)ND-7Gl&]o?p)?-%1e-bsel>`Hf+C4."Yt$DG'-'[DB=c_09>0`58$_$Gc@]2=ReIe^2j)G15KbGG'Vg0U"(c6Hdn6j\4NV;"L7Ss%8BuK._ULHLA<,S%80GUbHG_<MUrrCE=KZusP?,Rd=p>C+'j%.qO(7Dp#:(8Y,un<3YS@;>n7Go]p>V:^iD47kZF<'p(^HV49r0_8[Qtd8=2cr&e"4k7%HI?2e.Y@F,HfL0JfDo_df9POZM<h`Oc0]OK>;DFS9k[aZfUi)dN4jC3=m`VT]"24[W3,NreXV#Gk-<cN1Ar&jim)T0AhbQdJ;%U\%;`os=P9CMuJuUkh?)m_(8SgFF;(6*!X.#[CRPsiMit7*m\Y^37a*NnPY]"O8S'GJNciOYiL<VKnEA^0:b\$R1]>L#1A@f[nId@+$%.ZW\!im\"fPA*\tEnc48FaE%;HSLVeOq87lPQUT#:-6cuG.$rSMa0T+k`>SRZ$-8T$8;iY*OL17E&-0Yk%6GO_34i0V@M9\deCcp%T;WC2_rX'Dp[*=_1%oIp_8.rdKX[L52XSK'e'FCkkN+aSk_peQ=u.kA7&@#Np&8po3Nb1VFT6BS;d?4^RQ7&UlHI)%<u`\oJNlLp%kUYq++hL?d9GJ^beR_=4)5b?Xc>:m*7R^P)YCZJ(3,i9&=fg(BHIPdtNl4^iL4;1B)bJQ,*&"c^e/=?=m^AB5>>IAE\mOir37XG,%QF2['=g^=bda;HUgIY3qPoN6_Gg^`=)K:Cu_pECWhI7Ldch+e)"%tCr1$Z=_#e5&)1fF62c-T^q[7V9gB\01>E#WT2]_>k?XNpMZ%N3S^7j8Q(X'(l/h3VNepM"*ub?j\l\lC\S]I3n`q['@]OrUF8<@Ztfb8(Q:]bm0,D_&eN/X&^>W]dD@_k/kk0P9.Tt@-"mtPFh*[%V5[DN+F-'Af13HtFV`i6R]:Y"i&Kng3oc5JXLVH8CGP;DoI!al1XX=gPr,G=g(I/C:@*hDro[sKQ&dESWU7chgQ`LrAF*F%4mVb'%_mY3Q5ujaBD@B"1`"bpa13PF&;,,Rin">UDB>lj%i[p`P^dH'O&>NUml+^g#Yc3?TIskNZQ3?i!d%7>I395Aq<W^j^#0V2os%"UX%1QXMaDVfpnS+l+2r5U4$dhGdcQ:<L9c6>AO,E+$QP#^doF`Ad-pu6$K[UXEmbnULgcbF03IZg?T<ET[>=N1kPa,)?=IeM6_!*,&.%S?rrA,ENjP"b3]5[OIS/e!Z!l41H?1-;kNE\S*i>BB'KUVlQ9pNY;iK,cK\8R\92r]F?GlRHlB`cSk@E.\A,FLk<u@k4Is.3IGk>%3]_.C7*b#6X(X+A/J#UZT-N5raVP7'jnnGtm!udO'\WFqk-geo?quonQ_TJ_FOB2B7I#L!P74cn&@95tiA3e?A<,PVU!-)=1<[ne%WOU!@3Ni1T8u8k>m^$q>bFC7q,Mu:n]7jARk]7&0XnN+j\3e<0jIXNc_Y7i+H&>(s_f9OZXZ#<KiAA0]-l&,%qqUr(khb>QHk9p2%bJk#OiIebSIX]Bso<CB(T_`uVf?D?4kr"Zp`J3><`4m](b.S=H+![iYhRZl)5$m]gg`SCt8:KX6k4p[uM):mcrNOWpCVQ:$e"_8h%*U*&Fs7Z7HL2Vj^KkdgVb=26qK5;dD5Ebm4d-`JJIc3@"mM<EklTkH-BcWgVrUaMXG8YZ:BC\R%V7a;DV=2_'^Q,q^p(.#N%i7HF%?P6n4Lpsp/s56&nIlluX#6*)HkVW4CaOV8b^Sq1Kbjj@&mI@O'GH[G$W-^?0V_4"ih!cW?kIC<RK?d6(<AOK9,h3[BKsTGQTT)#G%\U0e/-2[L_)s3L"8-P_"0fS%U6YQ[a21Hr[4k[S'7YJ\gk,%pum\dVnpapl6f6^7jSc)XFCjP/t!N"Jr5+7XIp7Ar=+ZuTB5=%1W%PNH/S7ZahN(PR,2jKR\Q5>;_((-Qo[Xl(ZM5LJ/b1AH2U>rn+_S_P%-V<[kInQfmgHDIQ+\dq1gSM!C1_Wb]*DWa3+EnpQ+I)@b>%Fr8rFasCRH:apUcG2QBd!#\>`TLpD\b7_NoTnQ?L&8.mLqo!r-Zd$@2\F:(ps"1\67gD&_F*i=5.C@OVk#ZbuXWMX<Z;$42g!=]B%O8JEAn#?*OI_&?Q,Z1[p9](<+`qVi9>#?X5EEr9P'RL[hctkc\:@B:^9/D6)p@sOt145Eu*mRBGl1F;-8RC2EiYg_hr@&,<(Q*le%A)Y[k9&m_[GZXA[9e:&%j$+$O(4f@l5j!m/6kV]+6sj[Vc$%*pj5t_BgH:rYQ;M@b8KHZQM1:oh:g"ImfPdj`2</Cj,D`23i?Xfj%@W.iq*TA>D&?!t_+kBT4C.BOkW5tp&Z`Q"r;qjn9]nAB<4BAD0F)?d.V$Z6&^Vf[0eQ_I9PlE]FbOW<p/*2,q7k?bSk+J4`Yc2uO%D0B5Y4ln0<rKO8l*^B9`]IK.qr$$[&5!]g9-9dUej5o-dlZM/jA6tkoFT`k8bZpSjEa5/p5P"bUT1.0`qHTqMqpgQ^Wadc/3!<!j%#pSrO#cGt>c4lqD0-J;KGj;Jdb4AYPQu0L.(#o0kTHlDaEE$AQc&;+)k,qj(Q\t_6K?&HS-AjH+3[Vhepl[*IZH3?=o7^$-rqmfe%!&0$6g6,i-Hp4Q]GYB,hD[)De^>="E!oi[)iGQ@rZ0_9rA*!1G7(Dg#Q"b8o=8CQgP;K4scsblXHh:ps!B6iQ/*QlI_Z6)d&qQkl%*Rdr4p<iIRK;R&0*<INj*Z$'GD@3UmI1M;8E"GdB=;jEK2BnPd^>H]nTqV9YQ"K"Q]Flfe'GEe1'TM311m4jt0/EO^i/EJc\U)j%%PN.Gq+XV9^M0&@4`AJAmGfu<4HnA!7hJTZuXGMCt!/ZnRoIY^<)I+Ii\3smWOSk(V<B&K&&Rm,U:AfPoY"UFI5G]-8Aa/#A+Ff?"%WqCC'T]Yc'O5JTh.h)ge?c,+-f$gFNX.ootW5V^5LADPc8E22R#dh_ePRN!(4"/P1P@thX5_H!.%/9W9<@QnSUCS%+Ek"Q;D%2c/%&"m9K@k'7edHC&-#mu-3)oKA.<RcIV9R&8a$_mmFU:#WbU-?Vb5=SFEdJ-I:9UnWu5d+lh_r#E?eHSq*89I`eR!f:q!$J0O",<]m%.B3FdK,0[!j=+$UOH?W,87!M`[5./`:*!0aJf(:5R"j[IdF!t!0c6n22),q%L3fQAY6c3ueFnkY!X8OJ[>Hl.Um[ZJ+$>";J25i/%<)0h>J]8Ha>-n!0r67V<$B6M5\W](I16mtI;n=tc`e'n[F[U&`&&9h8/8De7UnWf9/AUr_%C5i))4q2k-)/OT?"Gitr5K@NWfJ&6%e=Y3%:$[cKZ\VT1?JfF:8qE^o3)+_X;/7T.OMJ,FYn)rUhmBK_K^:+6oC7)9[cR>'Uc#I&]5s)3V$orpPl9\Z&:#J8l3ror[K!&P%RQ!U%A"rB!([iCpMEZq>k\LTsBjc+LjEdKn;,-Bt82^n?iNUTl,6dR?c?&=afRL_M>F14/I]A[=oZt>kFp<m-$3M"'-h-.PJh';8%+&(YkoU!rmagK(Rc)>WOD9T&u@^m0a(nV:1)8SO74H#]%k(-q@i)2C]_+q_ekN]((2)HE[ge_O=)+U^534S#:m7imn3P-`19geAM%%:g-;f.'$G^V>5\HZn`T.F508WGMUbfGs,CQ^I&'`1.hR>PA0.dc`rh`]3D[<BMp^>gF>YIf1-DUA14EN,G*<HZo+=XSa5X_\bN\%NC)%>,WGTDHW;PChm`1TD`3(B1%]sIOW,JF-g>i8]BP;PkG"E-,hoVaJM\M-(O]eCPC%l#!fd0'mY/]B*=Tp#?pe[*+C4c$##?NF%f6$j0XL5+(r)`YJ+7H++8U7ItGVV6(5="qI')%&CroH/=="sIO.(tZc#W5<I$?>>l@cpl6VBn9))#u(q?5_O4:4U^qcui=_&^U&&%TO,/#hF\00ng!l05'`87W%rF&C,UG+$bg;G$I$6LX%:S&Q1sU]a)/<p,.1CCK"[nsJ_46s3_kb>fA"F+Nu_SIV75('I]5;1]Mj8f%aNLo>&ikb4o3AbJQFj;4?n@AV9A.Kq4SlD9Q]8UT+kT^7BZ*(u,e0I8VbYae3tok92?b.0/C`.pIfAZPQOKe8Xd2:VY;)E\fQloJ%+q40nrBoVu,RV#njaO.m:OAa(",LK+3$==J\4"tu_BBGNh_OE#A&o_+&[oQfPLt$QoWJ.n!,-D@j7C;Sn0,Po`jW(VNH4J,js;m]%1:KG5Rt4OH6&CEY5!4;YdHT8!JL=U1#,)B#hV-=EF&m*OaA1mmp*cerPYm:RhXSX\rgdo_[N>N8E^5jq1,SX#&lkd7/rCflAPj;/%`ZK@<6`TYdQ$`1`\_pf9j.eIPBZn0]0\G`#Tu2\GQ/&G+8/_@(!W2[t$J#I&V*a0u$E"tQ6d%'mE:n@ueo]]:X0o`i<A8a-.)^"L%d7j-%qaXX`9m3]sb00<@+MR(#GMFji+-&,a5**YWQh^97n2Z[o="^:Z$$r49+>ls2=GBoAKYd/fA9(`Zq?]uH1Fn2Im"\>GBlo,$%M*9MkjYP$Uhu<.9V=U*H5*YuVVBh!-%QoVSA;(NEfI)eO[Y!8bl#+$Y&HHHlhM(cP3\H5PWu<lDf_l_pO34E<H1PK@"4,d4C/%NH%V[(0V0mZ8bRY?f3A:1Z'-8O9;@^eN,R`m'<4Se7A!J)`eEO5H%?+*nZ+>sq.bFLj(A>W44OfdNZ?^(FI*r#p$r'$o8D^9IiM?CiI%6=?J!gm2-a?Z@ku.fDG^8cJ?nIS[SMp&N@f,0P0WT/!Wl(K'ih9JYKfpl1R@@j.d6_@O^_X\*;%W8Thfji_=T0I/i4?@JKuFRn]O%F$(&Uje5sL&LAqb3W==EZDs^#8bRJ$hrQ=`d/kIR*L61>qibk4g15*:n+-Ysq<_gX=4[P2pK:M5/5[!cUe#VMSq1S_(YP9ik'*4O%p1O2Ml=-&NQMbUnP^OtC0CsCcWccD*qLq#qGFo8nmS,jbgf*g@M1=:SJasqd97aFuRS\8Yc"/,%T#;HWg,XM-IZXLVI."a)>]LJ#%K/qEliML/!0/rSJNY0ArT*,]&/O\DB`D6>F@^NeE61W:<K1;iJJ(T;AKjT^Uht&H16n[N+4SSW/SQmS)]Em!4fk0j&B-<MhWnM8`%%TUV];3OD&o(0hT5UuZ-I.m4H-omp!5*QD:AjQqH9"bsgZGgFA'5fu;jukYV608I-.S(/YOfK1TNZq3J4A4)[-(Y$cXuo9OmW4!m%EG3aQR/8n4TB2H\^"Z0EKfO02;E9W9CBZ-^-P1XH%=Y=Di-lB\HG3lFA#'R[:r!`a0>.l+_NUWMOX,50AL[CVT4cIladruUlMRqh%kRE6%CaU_r$\4JVqYAY%Y9\eAmp?AAVlEB,P/%N6NkYrD_V(U/$2+6`m<s:Yappmf3$tZQMbM6;4YM)KO1uCScVNOu:mnn46q]u>%,>_!EDt]D%]aoYSDoUI0.@\Vfr^ih\D%HP;nn1c0!cD=_O=ZBBZokP[jY[7*NIs[uZ'6Eo/XZ-,VrS4S88r!Ud5qC5S3t$n)kQW3%B'E,7-omW!PC$4DYVLYY+b@WA1@hphW"-/Nf?<9)WDL?CPl)1!KZh((RA"[tN5gd])$JhR!t-dCA\#g04q%B@R?M;8BF+iB3\7%^%nI&;Gd`Xb]s-%!q\_CS$ep0]9KJXp3QpmV9$io<W+)R].C,md=dBm_A4?DdOQh`a*rjiI$4XVUP`AWZ*_H.uOcZgl=bnX5l2p*db%J,,?7HML_-.aMn,=.&s1!B*A3_FR=bD!%H']D=S9;/Mb]N(]jPKEX/fnUi?S);l7M@o;IHam3p4fr]_!q@LRo<B?0,.K57AKjRm8%PMSeYE*a=PPDj5KqILa3(h=SVabSq/;XE7QDRd`:lR\l+Ab)m@V5@TRP^E8&boL.ue[(7S/[_ZV'%90ifUm`Kapk&""1IiNi>6;^%!#3%9T%rB[HF81ekuMU-?5U_p`Qkt+>u@eNGlLr`^K:/M_sj@qT[A$T<n>=UjTE_K?ak8uC.uZl9-Z%7Mk,nE9O]=?$RU)j;UNQf%I""kP*_M3GM3qcg3UerBe(4?U\B6M@K*7/K#J'<lHDXO+?-`mkJNsODKiY%hU[4X:`.h-/ITZ7lP\ajBeuUE)fo2KipCQ.LZIbcc%BZTV'e;N@n`LNkjQVTGed#S>=P\r:&q:8]5hVY7TU+ohW;1I#X;G,0t?:0)miPA=f4G.[!#S]H4-i<9.I%Dgq#-kZ=9)gL6$*u>o%EQP\/""ak6c1=7,7l2%c9KUE;*K:6nr]He6bHj4_3rfIj[Jc2T"X!FFk@_!5"nCYj%o8QZa_CI>!>YPf!V,[mB9Sme6Pj[Amg@uX%<@Xirr&%[#*/Vr,c!^IMOWg#EZ<s^bkguH:Ans+fE]$kl9X&l:#[[@DqDVB<aemRQXVk+YW?P#u?F&4P.5<-K%N7RLm1o-!!n>se%fBA2ib*.IeW"tecArUP\lFB3FCmH07*_(jElZl55rTP^'Fn(0o@3!Co$ea[P:U07>.5X:@1eL;i[Bk6;[TE6[8+2Q?#\6Grc^D4*%l:<Bp`^]EI.iX>S"\eJ3B[u8<_YF$M]O7nAiD00iI+Mc]_g=aq'&iWa*ot.jQt;,<bD@j%MGWF)VfG9TbsJ?Nmt-mJT$-\e.VeLX%DpfbOQrbV)<YInEls)JrF^AdWjkrW[#X*W(VlocOh+.#2\:"mr8\Fic0,91\^\INlFXq1?ji[&YmFCg;7!HmZks]AlX,M?(HES$Q%+-2=c2OMQk"G;,?<4rbp8%Pn?;S4CuQ2RP3Vdf:\rrgfANp:4`AN9DX]R?5p.>S!9H7,M6/8@8?e8Zl3P:F6=+89o2VD0]$5p6/^%UeLs`FoEo?M\`=Fr&r:'3;]B[GK\\ha(O^6Og/g%L6soXp+IC#]8O?dd`@8SVcc],$haeG:HYqHUD4KmMN4ME.[1:.qs3aF7DM(n%HK.)M*M*&lV>%bUKp^hqE9@$?FIeWMDS7&lY:;JIo&7$0a!-h0X0^FPZ6)V32Tj=$:Llir!Ph?-2c;QEs6=@F;*nrMM\fe&\1Sae%IO,=AFjh(=m.PC=+P[a)%tr:+.J0^Y+BRf%g-Ysjr3*K=ER)';Y(0ILnLhuNpL6#s;19uUR^4d]]-uE'3R6&W09jg9b-CT53>5BL%VRDb:K8kV!CEJ(A.G<M,_-hh8rl.m$dL?cZm>7([h7(I\1cFGFTqA'\2T.*D-r8TI'uk``UdLmG!T;YV=@p'-9T;tW]u#,e9@NDb%4.ZC3T)LR;;G37`0#jZ+pBt:?26c9BOh<oEEV3pM9;9mA?*R*>9dB'`5,/+SB]F`sd5G3G65dtr3IM,PEFo"o5"XP8fBZkTVJ_^/%a^K1;$H%1/DmTuHf%Gc.jCAI06PiMh;BHGG8s7_NIEq(8p=fRRRH3e[4*Xfn$"Ej\)l6t'h&;kXl.4/%,74WdXPqY,&Wu<Tk5k\X%H2)/p<dm0riGJ;=*mA0pUT\K_[`jqUIuJrB9L2XUj0%]:><<Y=krgh,\p9Fd]nhgm>[lD0oX!B<\C7$BkOgp5pGrW*-0B5Y9G=P>%j@lUU2;.)E+`u:^?V5?YM]JSZ=:%IVH6pm&k1@OD.?#mHd'h&#AM7fK;9E9RJ&mL?:65ufr_)9U]8R.%<cct:?F6UppFB-\<=&\b%E\DU_XUd$69Dm>iSY3=c,o?aLO@)'i!NeBT/-73!B[#5+?@1t!UoMptc;#^\VBk!g^.("UXl%DlS6jT"VV^%Q:Ca5PC>,"rjOV>F%K2g6C1qu<bi.CN^n8$@hk1=(p)7B>D(Kdk6H%0LfRd.F^cLd/oAL)aE!%X+eYm$iJnQ)*rm<n+T]LtdVZ*[E.W^6]J()Rde.n`ji%+8r\i6$)CSL8W<RQk`WooT2=X2BU8X1U-,j[0:F6e]dN^!HLr8(I3F%JBQYFmpb?p:V1!)4V9_f")7V:HG#Td&+\SOSFiuJ'eq6C%`iSX"oL4kf?@9f/eD'\SkSU>!<ue/H`/u*7"MHW)]Aa7aiKKqGmHFW&>)_1lp&r1<,m-`MlU:[>s#$,=<ZMooU83!lg1^N\s#i](%qK.iH'G8."D!_+N\O:X+%(sLWCcIHc-A(Zm5?WckF9Z^Bq6#\elI'1tLt`B%K#)X7=H^(Y=._"hQ97h-joFG(p8H<c;>2JO:3l!<%A'pWFVM0`QM0CS"HImuenaJsqI/5^ud5QqC\PCT<K5:-!IW.uQ2WqWfLJ[uLm,+VmKb*/tXZiSuW>kQS(SiQ1?Sm4Rj73#`l(8Vr%nFB0?7DAWfkkuag$SRYP?f^4?i/83a'G4,("u,h*0-@i=B%6/K3`l)b:9WO'FH38Ep5'eRiD^7+g!H<'Q'Rg3pnuS_WfrE90$c<9%_CWr5:@;VgnIotFSA%)tKr<@/Z]rV0\n!54NFXI0_0%^Z%G_#s)J_9:Bg=Da-6*$*Q7CEse*6D(#s]\7,0i$@@;%fnnYQ%%oeue0%,^P4kL4#gT4+/De-dXcd#cGk[6Tf<M086$#I)_KjrqH1,I[16.p1(oEoO[lFnT&IU[*630P1@%/-.',RbF6Ii!il?5qr_P*2:*"D%?ofP2;er%KnqGblOs(:5a01&b*CVTT2F%p_JbIK$d2FG)pct("d"Ndm]i'pap^am(i2+t+M,NrZ?iuYLpX^A;X<#Z3U:gMJWr^1R%PUb=+1ilX``#^HAr:8ZUAYA^k,85Cfj8#@'JH@EHMT.Z)"A4->c7T^]i:<thSse(s4q']EnId:aSWmrA-3dOuEt,';aV*8"o^1"T%B*5NjAOf6AD$b<MIAQ=]<WHXikJsk#=ASVlZQnmWC'A^jGUNI+_!1Hk'i:VM'[mssJ7>&!K>ua>fGZ10pe$cW.lWb=h(-a1rBKha%L)!OGT.!2FQSr>bpQ*8=ba$FDIIZQ<;EmE36VHXV/qm'2N:-guEYFMk4OtF;H^'(F7KY!1Cnp]F-NPg5r0.U7IEE,/k@2:8W5h-W%X8L8QTD`O@K/EbE#Yk3)5VkX,I+AMcF-(&\`>Jl;BZu.foB=AC:Q3LLJMp]0a0n5d?Rf\K/"fH(1XC@+mc]527.=N"J'n&XoQX$%%G;XDW$hUkI0+Ta5O5FEJkJZ20cI`+[%GneS^Lo-LhOesX<^8qt,I":NG(+@^i"q,m]kRbRJR2Z2IQnNA6C'lDkHSe2'^:tGYn$*Y%_Zr8r-),P\HX[HV.MJ=9B4lK':k4/6(;HWG%>+D5n,AKK8O2$Wo<OKm:8a$IB*JAG0/:`%rc.FE0l-klp't#"o2sm;2[;+b+!G1C%1l'#gAHDt1Nm`K9&SPuAq`NV'5bf5oJ0GAW>0Q`Hc^"QEB!rrl?cI[#oJBC'R*b0BQEH5nTWdtJR/t";g[K2/FTtYBCj]A"hNCa=%G5)M39+*Q&C&^"<"&3+BN$GI[k59u^(asfY>H;2*#`:IirT@=Xo3=dNM'W:3$AWs=oBRk+V3[qK1tro(LAgb$p!Xlk1AUIKp2Xd@%I*qYY&Cm-:gudiuRV^=8qc6L$#"fK"5Bfph:TYm9V))SkdK,2r09OLcj_LTh197=J.<kGg8XQ*LZX9-HGr#?:=he6*oOY2nMq9j_%kJuc9Zi-<bdrXO!j0+0SM1s2q[WS!0090k?Sq#7Rgg/G#.=_.].[lTZ=CA4"*2mor?%0p;hR9&7Bq)"JJ\1j%IE(nY`E4].\j)SU%F#Ir<,-<u^I'J-HOY)!ZJooB9l/`@fjR66P(q+_hn3*R[EQ[G.n95lN&UE]?O0<^"VB(rY[D:F1kZObMjgSI/GD\MiGhRV>;L9"Y%A;;o0iNb;t]+V7'rZGO^NkVQ@Q;@JRf=eeHn++unl#`A/?$lKkjuO&=cXY/EWEf,]3]BH&Q\<^BgD\@bY=Ac>Vi1:[+QPcW^#Q"`%(k_"N?mp(<C27ac-c)"'lL@TQO@fnGK5W<SLrt'-YI\>9Q#!8k/:=/_A'u/Bgt_cNGAlD@[X(YTi&S;4hs/;_bkn-t/[0pMIQ6T"%FDC^U]kM"24:Q?/Jfc"a48Q1sc49Q25#,(]qsf-8'*J\]Y6aPkgaG+ZHdkom*gN:eK<\_dVtXmNrm-=^ZdUqEq9eMV4]j'+@LmRa%oG4h<8sFA_PmpQ5+2"B]IGE8d)Lt#c3<1Z.')"T6jlrNIPXa5X%P1u?s(*!"$IJ@ZLu;>t:o86*8+1T_7L-;EGdspX"XqEDgIi!W%$,MGO-ItGMa%(KLH_jNT^m.BnfQXP#$Jm''%NRX(D-N[S)D;aqgTb4G`"jc,7rI_@)ps1.eqJ+FeO.feOqFoU0R3LiSqtQYcW.ZZ%IF6"12Dt63;EboiVMj#d?RIGPQrRkrIWfI8?$JFD#j94698WN(>9;II<K%auZRX"^YAO?\(D6K'PgG,&E-qrePt^7.cVO4$&<B?-%H+Di"RiHN,3DN?O]r!f)"Q4@k0<sG*+8[O<O=AC"7sgmncNQ(gq_"R7[+'aUp<r3"?hXSa;7!an5aJQnrU<mf+qIb7>sOa5Z\74s%57fOd*"BGk=6^%uiH0jXkRa]1Hhk)[57`n=>(eRlbV/[\R[H3Jl;G:0T8_\=$(k,.#.L=h$<.4:/<m7g<[/W7gus0,Mt*@$k;B=1%H2RLNifEe#_.j1^q4gaSRMW$e06/5b$hB&aN@g2&H@$WP7[ErI/#/k<ejG`j@s@Xbmd[n3G7@]na3j@.>KYCX9#[0hZGpGPi2Eps%k3_XZf-ko[b]d[EGkX0@b9VBT,9sPY.DFjjH3!6oNM=JR?TB'D7C)\L/#uCked*h!+3I'@-!(jhY3(cC_6Q4U5+_F5f-T2eOU$;P%-+<3O12&a+qV_.][arfa>"h9UbPl6U+%eY+f+C>c[r/TNl"S?qWo,$AQ*hHWN(f1F@`<k6,Y[a)&2QioPmn1E:5JSqU!Zom:K+k&%nr(ni`fi>KbXXGXA>c9-<MG?6-opY@=?cHFU+tu2JEmUufQ;leS,'5#=8R-VGKsHK.Ci_^/(r-XU_o4XjLHI)en!1%pT15*=\?[?%73AfL`'J2Ig1]q\OLDM.ru-YkVLDrG:B&u>N;BAk:VrOm+="FIKb\3k'#RmNqM1]1V?GbiSN=ns\"]dZm'6Caa[S"eZ5F+YfIIo;%W_P-kr+jUH&&26(HEu[]k^:G6N%?g"prY2qHOdVbl]2F;%cDd&gN=qio=irsZo.)Y+kp0?3SOCc)-gb$\Y$X9WiB`dP.,/,GLS6+%pWMT@gXn!j_l7!t20%E=*R1cP8Bn0h!QL(]G"[c3-/.&iP9X9eTi&@Ua/IC*XWUXnY&>=rIDp2Te=V#4L#gSu[+99aZXR]VHi-M@%[^E560mhnaE91_dH<oUWf5QtNe_K8SS=fX8grQ)^qUffVp&T&AgN!T^jnd>@(r9f8l'Wk4m.eQ=1c`*kVN+35P%@]q8HCaj1#&!5%iFE\X.ihK7A?_k]Q7=BYcskStae^:X28j@a6h6heMrZhncuu'9?OqZ]:noMBn<VZ;+#XN/DV1OtQTY8T3jkX]:h`VDEo5Cf#lkh"%iO]$&mJ'G?f,)^\pUEV;@BS8jY2U<'93r_+UL%S?jDKb\)"LN?DNOLKF0*j9-i^=^+6;:R$i9LsT#&;!/W8Ap4gLE-OHnH"=VJKi%GYcRY%$'BcH+%\NFg$fXSXCAN/jeP39)q'L^puD4pA7a@KK_r$5f"qJfL8@)9XEUk8mX_U!_igQL,Y4T[oPh.958a)nAasV&8+6%%*ktEC_X2m!(+s'<SeY*`qEXgeg`j`R/Jq)q\kW[P/m\Y4Z&@3N.9S#W%?Uji.?1b_'1Ppsgh]S%OmhhP0W*ql87(b'Lc`QsPPSe(%-FLu/2W/InDH)7qd2-"[&LO]*^b=k_*Ol-@-a.snWO-!BBf)8B^%Ki,#39d$oQ-5EgIM<<cI$'g7X_``@[r()Sn1o7A'6(_E9la3%eWuKe0r(`V#/\CY)_e:IL,7^IF.JGV5mVDB5(S=S;:Co!<^kiaX&*;G2uFlIQufnT2+DC4POhn:AJSLu.\8L&Q)@jH>MY=eO^+Y?%g6t!=B58!qXh:$2p,\VS:-37V4e9?+d?np-E%NAN=<GI"\M5kOPc/D".h$YCfq`RF%_SIKg+E0RYOU9`&J%U&W776-*l!tiY"H'_%Kg`OY?_Z4B8:WXB+OOdck1+5@(;*(Gp5;+lY&q4+KGpVo\!6IA+uK#%jo&C6M7*HRhl\W[XC<!USa@`Wm;CK]EB>c,V6^RRc>Va1%Hp"j"XXh;B*>>k&Zsi4Gg."qV9=ZQChuKZBVG1?62a4b(F7jKblU\WpP)&;/'!c6TIQ]CnNNFF91%3kSfuM52]-#8@r,MAPGl1bb%-tpdifU[[ufoFaI>H9\:(8[S([m8kP/1n^"Q1pR2fQ3(T8T))-J/_]KlK=rN,BE.fW"&4)Z0r,iqXTPeiH?7anuu.C0NF.8eqVP=%)u%`\(E,CDBPd"%9-.\94P3tuh6.pKZIE@XgXu7T<b,LGPnq!@ZL=o!nb?1oj%:7OlU"%W[.c2OD7$!.(SWM?&PX(a:mUghCpY2h%NW-ad(M^NZ^NiH+L1+j*5el/lh,+8(0ipD+/<I3B_P2-\kpeG+)KWlZ/hC:A.^:J'i$`B#(`W;,cD2^;D*=TuQ[J5.H4$a(ia]<e%HQ+EKH97\.9@ccd;6gT'1+B)fKj&f0<D0djA6[%&R5m6@2ETOWrV]7X?@"\4\mR/[`,cGRcG#Fq/T5oJlIW+@FRufhl4%KEm[Ar5%@a%P/fktB:30T/]%GPeA)m_7Ro!,^Bk$+JaZpRijM7AI=3JE/-QqPuNEXYJp(o0mb(@^s/ZNP.U3+(b4]7D`tC;))<D-:GsH2P:r%Tl\MP>KRf:0Sdq6K21uD\'LahcCf7$(0i5Bc8gO&Qn>gn%\7YFS]AL7*'36k3`EKF`]8.d)0?r"DK=s21[+>rNZI3-3S21%:HQXk%F3^H-8)^nuTl\MPPO5X*3HW7Man?Ta'.[kQE=]^1-;`iKXY/9qHL$@8<?&DGSUcWG.@o"ujj)TViJJYLmN]DqVtrH$amI^Tl::P0%c.9b\EgFu@::$&*A?`:r+Gt/uc_7Vbf&OX`m-;eTpZ%16iYU3;2_F0nmZN"\j,,OX6^O*;k"p/Ac(m@DZK<m9@r'!=T(N_pf%:<R%n\3gkOLO4ef&idAUR'"ilOD+dFB<\BXA!dnmY"gu0W=3%D'R%mZCCNmNS-s.RI%B0<Y2%5"N3:$lfqd)Q#6kB9$Lt0o_t;=)7O")%cWUet=):JUTA1X^dA>'%ml`XKER6_Z*lAkM9+tL79ep!)`Dk.CF.:%Vg:&_<X_$hb0luPpFl4sd*%'p8XV-FJ>I"%`m1]B!ZG>s9%"ku/DkIIoZYtc@4o?d`EpY#5^[QBH@H`j`KQ$mCNH@C0Pdj55tg+!.7S[.,TY>1Xhq%F6=m=AUhO)O*,f"h8'H$h,`@dJrfOM`S-%eeme/ZF#l-qok:I)Dc,n/MZt)_J<9^A+iP=CCa=/BU`JT)#33i9,jGal']X7gX(NHXK5*'PZcg#DX!69B9j<V%;5g`2Y41F8foRn%H[^;!_MRfmEV>\b]+3,Xbo%*mmW%]7RjLrMQDN3-pKk7q[_[ea<Go\l>$`)OpNc+(gfF%GC38)]0q-2?()a])'iq$Ga`=@?+*jTP%G2gf-Ug@])R*gqqY0)We156ciI?[Etd5k]o-!*[CPT1@t/>S;S7[2F3Ch/SmQi(a=(90N0Ml1j9/\='Afc>?=FNQ2,bc<]m&l:@M%>`lh%bW+?0RIZJ;3nmgM)2BillY/)O$p/YFR8plJ>pRBLFNJoRa!l9l1IYj<"(ALPVfNN63@3#G[bmp)jru"EY48W5)hr"[6tD7#%%?TaCgCMOQ,,=PnE1_lnIRM1">>Y+NFG$fHY*Lh@2p9NO-R*%6k=:>2[F<uDEXq#^F[aF?G"H3[98VfQCZ"E*j)0h;an[Q0&l3F;%k8aYB*"=>(GJ9Q>%N_(hc<6o3G*@ZH$Eh-8cD4eokH;6GX@s]lD-aBh(0m,+\)(F\b8mVGDYNHWkLF9-c7r7Bo`c"u>\AOWQ(F/p%D:Ja0qa[N#lVJ@9hN9*53mYt?4a3#!-gc[l&Jj7b+)[;6a4ARlZebl!l[64EG,W!tLKh#NF[u7H==.t2JZJA#/5HDVh&j.@5+HmW%Pd:4rgO(u=F%9);43iV&ED""Vo&4]^U>OD.j*Wfo?d*+b#=VNK?(a"8Mj9e=aRu,qdh0Lk[\]HVO\<;32WObjmF1B`&9>;pEb.=-%4+ghBn=k)"cLX*1;=-*ncF,b,;Cfq>Zh5C7eIq9#0d()bmk"(E,9'f;je3AHk<p9l'<8PA=D)sI,U;Shmb-Hi<uS]Wk8YF$B$5qJ%QcBQ`8PRbqi-P]Fpc-sKBu%5!-T6)0^#F4D?pf>m^k>p`FX+;(^Rf=kR[3>!CXeaALm_8@U$8%M3is!R0PlVTTsBr\[$*kZb=K>(%77QRcmg_-OTs<EbUqZcp+=!0,9C*iI[CpbrEGia$7OkdOQ/'mNMn(lKA7][1h5>BO;V`DsX`oW(p[qr!EB#dth+^B&7%Ij2ZG_L>%^l!tf(Y=gKiG@W.:/g,54goB$O)^7#Ur(g0bAL8;[Ye;#:5)ouYM:rLc?'7fC\kN9_HB>CG+K%R(E[__T7Qu`,77---T`S;))k*f%G9X]Q*dc\qJSHUl9F2e&T0;B^J;bC&*^m_r%F^^_%iJ\lEP\$%Sr^ir/`A[*>sMPA9//Ij'Gnm9VCoET#[MQ%69WC%TPNfC3(n9m%9L!nj-MR'._%iP6GE#:DSuWU(DlHd;=nj.'rd6>IG$il<cPhMdE2/g>^P>te<j"g7UO;=bV:;9#dX)/>-H+kL>s.r.,2)AS<1f)&%&pEb:U6=lOJ+m'sLT_+8@-M5$q9^hJmD1^H%,K,t3b6n%CUJ#0ZMWi`m8po1[hTd('A=KU\lRQ$.(WCTdk2FeB[!\:-+h\@PRaWH%"Un`qXTC@-]:fTf#Bgu.9[Fs#DQhQMf`EHlk9kBkT]eR'5BBtP[nCm[3@29XYkC?*fDA>^d&$X7r)`iT[N3^6#P;>ohq8&73E@]f%QAi.r+<=RWI$8KT>D,mo=7tc>@B(^FMn(2)*_L$MZkuPuk=&*f_O)D_ZQZ>o8OjO'2=Ip8IcZl"ZNU_M9a$Gk6j4AGSD9t7UeI\$%Ciej-o24L?H`l]sQ!^ege9R[AlFlWP-98,Rj=JVVg$0op25>+`LRr@Q%6=.WM&#30)u'"c?6Zjf?f-krOg?(#c+S$JpZepJd`T0+%>U/(D<_C84C7F*&kFQ&#X3Sntg@"7o!kMBohY"5>2N>VUQVD,S#A?uE?"MJfjjI;(&$ntgSQ/A1JmYt1VR+FAgEQ6/NFcq\Sb="8%e!\QlcE5r#2P!iH.o-FR4.FO<WHY8&f?'nr>,Td4arP'B=ln)"<^q7o9kP2R0qJc^MekGT=M*_/mOF^OiLHqhB%'oEdM_e>mNS.G%8nm>=he>!><L:oW)fM?CB/P/[s'"QaMekGTq6Sic[8f-@E`4LW']'t%cJH"bAN&@J(u%$>DRh3<QJ/LJkr-N5HJ*C@*gUI%flU7(%i8!UgB%'m?i7WB6S^hJsdN81cZg"Q3l-/#Mp=XOgl!q_uO^2MH=ln)"oum'^FB6I:gm5@3CcWB#>W^$(Zc]+c\;tQT#OjQHQsp<I%FMHJk$5:<gJsal;GDj'nga,.pQ55X+Z0V;PXLdJ+?#4UiSYL>d%SnTn[P\VqMC!>8Gh%LViJn$JF"K\o2XB&-;p/He,mmo50"2TZ%=`m<ih,/<W:[]&p<Z<KX,`Dhs7(:reaQ,+&6l'Ra__\&[Yh3RT&=M!]1&Hmsf#V"#^?3^ccBUJTI/RjKlm9lDMtLMffA&AsEk+i=%F*/h>oDW:rU:Vu^FLD1.D4B>?igMqf&]M*LYPYSa-otUTk9a7ZmrZgFP5D]55%*-D&:JjDhR=Ep>3B-bc?GReELOO`Q2J4>M\6FM%);%!:B6*ET0*]e$\p)XbO`&-\"fpnZ>i*fAK1*;9H[e2]1(<P/EOa7c6\o/pZAIr'2Y:XZA2cG`@2ZVG:K/Fi.QZn%U$U?W:qBhH%K*rF<]:g.TgC;]cj_h#ObM>uF2E'0BDOGE3k$rArV%DF>m;_&*s*F'KVXb.%&oM>d%`GK:A@GjAnEQQM\?XS@[15."RhKSf,DpW6%dlU5`CMEO@!i!^*o<g,3H^c*77_.4jY1$[bW;IDu-<.Rdn(#715h9,c]Rq-Fba1/gnAK2<:uAEe\i\]3\$I"^OfmJB`oc+02N_Dg%hOjbV\nGc"k2UGp>B;"'HqNouX4=_Np$t+[m]fqVU3P-aRI<^Po-,4hK/b56XLZ3+Cp22`,/_gsb01QdCq/")G?THloc85qZ/O+?%GFRJo^!7(2%b<VRj),[$O+m(`DTZ2"5-AhHgIY_7h&U]TO37$,n"mZB2]#2kIDaluqd(Mj0s&nagpoSu*,SU,8Re%!?,PNGFe;dj%hJ977L%VrOXDREK/40UoS5;T8isl];?[f,_gXeUO8nr"pBU70d&^\f5&o1>pb!mak?YjjHp?0<W\(9cgKX=H`\mHu&h1DCL``:F\%@+9c;+1@2Fl0`u+5?Pp5#.R35C/%F:Q;NRB9Oh8K#]o1;lfQ1;EIZVe1R=%O+'aN!h'=__VC(2KF2&>6HFcg[;XY<+(0lC;4+"fV%Q=21QUrM2e0tB%Jo<G790LSb.YnajgV.'.4CDc&Z([L4njrV6Q:MR*rZX,\dh)6KoKj3V]`C@_3q2WH("3@DibM_G.2U'VKNKoD0%NctkKJ)+UIL/jhGXQS+HmEtHW.9"g(;i[ou]gTN_MH[hpd`fZ-FF$RUV%gW*.JN&r(S46[c,*D!R`SU_k#jkalfRfLpc7'JfpF1F%a$28$:Q@&qmU<_u%%aTliB2RRSG);gdG8rNXsYM_5$[lmHY&OsQhUp`:OHZc9K"56g#r@Zp.E$./Pr1kb["ERp%YA1f^r<UAt\Tf%fA&du*Dg73fQ<DfcZHE"o0mlI_cQ6X-MMF3@%3TC?+cAe8U,b?N8To[U$g2d;];7lG!4kVT:Ib;L6NhcCX2kt2k.6@%r:0+cOQme%"]W&,NPE,TYXL6C]R2?d!9G_cb6uQ[Y;&kE7c)1e.<bcAPER\a9=&PBn(>(?][p><rDI^e+qq%Nojfp_@kEX7KlKbD_:%.8NcF';%Q*tbf2AqfUQS[H,FuXZWJ':JC58T:E$C$GSM1&"EYM1[$)%[:K>&,XI?"+J1@lrCJoj"`W=CmH-\qhW^O3ChT>YL^=bq.1posRm]%,_2:YT%lFYD:K+jGos+<H5`9/F47fcKlsh?Y3M141bJLA2:C=Ld_bNbVc5qY3:WI8iil3/,P>\pDlcf@`PtQ/f8gO"I@8ZS>jfP\%>LDj/V*bY,T,Y8';r`aKp32a\oN'b`.LusTAc)8T>B'o22Sttg/Qo9&Y4[O3Ab4d+i[t_776,m9o>OaV/Z:E$?!;.*A#;sF*GTE9%RVhNDSB'ts_K;`qY'aariF&"gi0*K!3GC@ec1Q2`A6mh0G%DDo_\dI+<X,0)@G!hA?@D*jfcIEk`-Z&#jg\V@)*_JVB8Z"CZ8_A8%#MSOISR](MGV_`tPqFZO^Ds(<gN*j0=QB61/aZKj+r/HQmk%Hu:$5d7VZL`nItg(DUXWRkB>ea*1[4k?)N25kQSH,'Ts9lLs/q!Z%Q1t0c+!e6eN7#8U(h;=Q;S)A'Ff=iR-<Yk:EraHH\i3.kF5_EpVeXjAYqk_!<=U.?rQVYKc1>S7"/stJ\j7+)Et67=]%Da?J0n1!%oe;a,_:m/\2E0nm(u$kTcnHaU3Ija_<jq5Ek!hM)O1[aoTRE/cYnGN3V:;-6;44M`[4gWGlUJ=B0BG"HQM#H-b%DGhf_qXoX)DP'%`MIsFO*n;R4P=&`LK>,?])ci&9DPZ`E4`lLcgcJFSR'D$pAW2d0'+lW'i:fCb_o2nY&7OA#2@qu[u7Sdd(OlialM1/fhgGZlXq3+%3O*:Nh6rXDqDh'"/97gM]%>7rQ)7da2E`#%I'9/`<63W(?h7SgRi.B-os6_!C>F78>Z((Cp\Ho=%+.MH[^t):74-Urme)c!\a72D%Wd`Xl?9dVH/`0pGftDj[\,'r`",Oq0Ia/&$hP%O[]mc9rjF"!'#5@sSml7X6$egCW\*6Dka[\CmDl\6`S/!&Njk7J`Ia5G!Xa'u5%mCdtoY--#%kdBmPZe@:5h<MKBI=+,tH$=bAT5uN-p31JZTC[YlDFaG%p\Hltc<=bSDKN(Son&'AX.SX"L5kZp>M]R^^XZ-5VmLGi%ML;V"ZS;!<FP!DaqH9uMW$[2Y-#J.8TC[eQ@n,bGp\Gcu\!Cq)><:q^_gD?P&ZFL+[dCbWNkBOn.!ZX'qDk_hYAkZA(8lBon)N.d%n%nj$^\+onXRGh'?6Zi8D7eZ<Ia47lPk2Wf]me89qX#U[D:SUoO+0+_qDk`<Rs,H\HEWt4XaXL0a1'&8%B'*u[Q[AT^"%$Kp[PBX%V-TVJY^EY33`kj>,g:H+qCO!t(iK"F1PW?Nf2!\Gb?Op'a\#dpbd""L2=L3Z136cN_;F.l]mdT7HX2''T=_bfD=@-r>B+pIqI]Ku%XgdK9ia0CEPMt%rr=&EFlW9A&c?XHAe^*3=ZaK5oZ]Sb')6fpU2S@YfH)&hd9PMCkrTqtmQrOuETC\9U\Dt`6n+Bo2YMAbV5D.lt%]%(_gh1PQNrL>=Rj"e]fl<Z\f_baW1h""c9kCcr3,B%e0TC]16(A?BMp\Hlf6';\`MgPEXg+_:;lXu_Zo<!J%fsPVNlfY>h<b-3]%^=U\63QRL!>,mN5WJ;DPct,d%/FW?fSL[,N#X<<#n*<<PGSS\nSXh^r)q,QsEf>k1(ftVc%;[+'l9el[0WQ"Ai%tH\"cCn:]?NEn%:e$g*n/P^.U@G":(gRdbPY/@:F@sf`^<l'83ZdrA&*`tL6oMl9B4'3aGgS^TLqF9[I6Mo0o2Xs>?ab%ihg9`\P6[*ErIY&^e>OCE%?^%G/cSfOQ/afN<qonuN?[eQ(%7.LOWVkU1aN=6Jj6O9@\1P`S(3cm$0[ORr_nkf^`:qfd*^9RjKV($kWP9$)RSN)LhqhHTa8Nrm%f5^;Zf"DG!iJTttpL%)j]^HpWVUO")h%tAh?hgSTeKB7pAMQZ13)('_k'`(7muK,Yo$ujRFP8s=:)@:%UY/N*Z@`ALP;=f>^Vt/L%^O/LLikoJK7.H:Q9kU)2qhQc+6q`(VcO8#O:!_sUVc's(8nCq,m0ZDK*l4W,mu931"sh[m\ig$TH(#VUQbN@?o<?bIV3*Ce@gA\p%s$Qa859An`og\cDke0hf0uDlQ)ci.i@@CM[;6G*;%:g&'c1Xc[W,LC>"\M5jS2[*EY,4[;b3RaDh*3U3<foBca'3W=cnt-ba29?M%jRI;E58PsZ#CF_nlWNp./0lS8Ck_l"c?qGra2Rq]J!'Q:D-gg)m/(?r@"fuDSbQ%6mk'FmfBR])R_AUKH@r%R)?/Sk@cHEPk.'QC%@c"j:AV]="/:2hqh[11g*\-C.47L64L=TlZP%TnP4AN0[9>ouoUcM_$aioSh@RnR"1-hL"jN(/`)o5<&KGSe#*r,"'$;qI@!2At.%$:",:ji(-1<2;-kBXU6\$PEE5'W>!3AE;sTKf]VPc@bru_S!!7#ic.2^\k#Gm])>BqKLdU;10#-5FCLreH_o<5rn[tK".-jXUN3I%^(#1KlB`*2ohVH_5)A/c8[<Au+crOB5ZXU*)Ef4>Qs%(L9-IgGMV<+phf$P,,$rTNdFEp_S<8\*=Kb1/_H;J%M-$n"E$^U.%l=!+%6_LPk,^f72cNgFPqQr8?@E;F;+;U3>m]hX^!2/Dp@ujt$qfijn;!8lpo>fipn0@tPQEG61I\53qi6[!.M+`hr/R;'t5Mj>dp,r=[%[!55W/[DjbA3P?eGl405im&q)Ap/9W/_HLWjdnhXV,m*]S-jE]qT<V2BoT@5.[];XJTki@Q1irt]!3ECh+2(;&oiNO\+\Za'S"$`%O#8Uk8&.-[.nG4SJuaB!2<u]dD$b-rga]<MBrbFu)a?V$QNk/P++<`LW)CkVq<C3A_G>`An"@J2p]TIk/"SP(Gehg*fb7?\Idfeo%hMT%g`C%Y<OY.-?LnVb&WQ+uc$ab!M,oaY<,+C6B`^HuZrf&BIcNH(b=./[dm<\\!#:H88C*e[VnqJP8L4@(\j#ACW5'<+[^#CJ,%7S<k3M-u:]q[`:c'KteQP$r/7cj.V11FjOSB'o.oU([,$4h/K.X-%j&F$Xq$?Y/q&Vnu&mcU!Sf`]qQ!5[ug8klnk8.UG(r)&)L/%N?Ak)o2?#o^uCWAcRVR2-mM,/lRuDSAol<')M-t8+p?W65/MCQ-T3jmMJie4iAYgg?!J>S\g<7Z$>'-%WdNI\cZRqHQhfcpRG'p^%GhXlhJdI]P9I2cb%>*(hUc4gJ@QK?<@9e2t1DLHBBha`MjEmL`G>M*SkT62\7n-56ijpJXdR0GPoV0Q\5bV:3`V\n(jGVR/Ld9CU%5*`Fc?`!+/MEJVR;4'O,3I/YuL5EmBq9Z(.i/>le5mJ2SV@('"=kK&MRDJ9e??9Tg"Tnhl@e$%`2%(T"4Jb-l306m,5TO.EnefSC%Hl9&.E']MtZ9A73Hk?c[]@>@-TeD\K&3^DQ"\VV?!PR_&7"#tKSbV.kMSWfd2*1@rn*blaI[!XO3%<&ilA5M<>H"=^XPkM_Q/a#c%'V6iQ+OE-YGl_X$PVGX$-W$Z%f)<TRjb\5hT*R,Ik>h]Upt\\uHn)2H7$?'Y,]b&B.h0Fk<Xl!6&jB1@!j-A;+9fZ"qLE._6SJ(_%]T%Z>8/UUhUMYa*RuCQ0!.C6u0nr@ZCQ,6jYK6D-rigI%EkP[Tl8h+_"[c-><PKDLDu,od4CQiNgC<14&#uGLqm3tV-)Z;\Gl#t@%"SE=*3qZ3^p#Ko0Ytk_X0pR)2X8&ZZ?1.5uQMKENQQmo9AcDGWj`k*BbP^h8b5mL'o^B*/&]PO.r9pu8nJ\$9RK%\Y\\*].B.[<A%jks:?QMKENQXdd.[`hh*jbTCb/9`AaIOND"SVKMM"Kmesg4/l(bB>YF`>d%ZcX&0Zhl@jI#JtFT&:rK8f_tU\0V`&&MHB?+-POEJ%+$,iV5EfNK[Vo]V<$LUH?f6o*!gUac1V;!\jqqF$,g1*\[#eLKgFV#Zn-(+`FliQuH#Oh?Fu^E`7dhhiKOhtZn"4k&EgP5mbjd*/%GOl2,9/4\77TB8K)siPV=Fr#WnJ/$(H'>=0M$1u#O>=PnYT/;G/E-V$HT5?)]f\rN0qRPgDu=3%&>rUYrb$`ANHgIHnSFI9Db%K\%Be#!7nR(n)\@WT8UU`>JNFs4+C6_R/`9t,_H?"7Migj#M&r$'jb,+JFX(-7R9<Rb-P^b1[2lUuZK6U(Zgb)rqY,%.`FTW*jfM<m/%i8p/QHnTa:rXnaU(WcmPXpVlkEC!0>Wa/"c@YcCTpiI-s09*MhRcp1!4QpIbFK1Oa9J4XHkJAdp=&/0nV=>4?=.Hue&bpT.*"'SM%B/t->':f"llp\cnD#D@)1rqK69Rcc2=h5)15D4?b?5"L@%QuE=6GNCrj::ad?iWe#18huEpF*<SM9&RfeHtoRU,Eo'n?+t(fOC1Y%*TA=9[`V*[r"Er8#fto;`K9Fe,'^+lM.RhG,Ql-!WC5j?2+DHbXHL-2PZ:$pBmkrZj<n]j(7[hk^uLb&[1DgWj\\4Aj,`!EmA]ZL%)V6$\oD4kT*gkR`#p%q<XUKo.1t^p&-LfmaONZ/k;V`K-(GB2JW.7%G(\$@;`'<M8>9EdEB=,*OZ6606A>Kn?;'b9Xq4XHEO2K^3%J-hLDif_m84o?A:cWa:F;g<?Bok-=7dJ-!7Z3bTVJ$P-#PUqt>CJc+lhA%I-0_+L.Zk./J*%!m?8%5=Y,4hog#fs95o#%k!\NniE%WGkd1J0'aA>'h=jeh&A&=579SN5$/'E[c&T2@J&AasSk-_mgaYKmoMUAk5b76#0gSYK&Prdni*rl<Hmf8N%8D[rIi&3tDJIWE"T?%m?pp3>JrUA<*H4u0O()+NPE#`,3ZO7$PhkM!cr=qI=]jU*-$09$*G5cp2s`P)nkr6IXc!dc^tfAV^9GmanlT5S:UFpLKJUGqXS*k%No`kA8VW5)Mm4FV1?tTi`X(?&I<o7:9CX._G\"'[!`Je!gbX%QGU4WA27XO$$IS#j2GcPceIml$Kct91U1NBjfaod..p'E7fkR(i%!^]2H'!rNIfb"ARaome5O.kK)+HTQi3/ND&+H(0OBA@'/`C;-U<`5qegGR73<V#TCfcF>g)Fun'S;8iKq@)X'A<&4mp1!RubF(&Q%j9of>D,hDbe[*o#V6+f1)b4e);50"58sC0ZbYb+JI!/;F'&?]DR=b8>,5n6E'+FTho*;0^V^PE:ZF?/a/_c#J^kF96[0?nV0+le@%/9'jk6TqJ.d1>H,"`^J>U/3[6`L#U5I<bZ`Ji"oEOD-!mMW-C%KZ0amf3+$Of#>g++gfhUJGK-g/^U4]8R>90@S](%'QLs\'$8LS%:QDgOM%[%S"";eXPliGU!I`K".#.3t4qnTa:EH.8n-MrQ5H3td5*(hglE[-_8o;9%p0Kbl3p[O2KmiU,:6JY5>c`lV8N5J.)nODB%5$gslkkCQq+pPNCFqYIs),Q'R(W09KKY4R>X\bDXVIZ`6\ElT$\IUZYkg0](4V3([@GhSO*ri[d+D_re;'q5j<Y2"R@O0s-78tq;%e<>Neas!u^iRS9KhkI/;7OS][n33^kq*<j/]V/q"V!HNd5-CB8_o4,LTRnsU8UoZ`#>I7UbP-6A-X[4<']5'$Z9Gl58$_s]n.VX%%Q!OTsoLMRnBkd3_9\.Y$HdW7]U."a:n<R/Bh^Zg\WeW*YO!J?nObl[p?Y?)I=4/;a`5c(OMs1B:_&fApWaB]KcW(G@SEg8=O]t]m%m$JT251Bi6^m.J/@grHB\F&geV>?PoBEg>+FfCF)Pp]-k\sIEU%([^g%7=1K)Og(ea]p#ODgli"qAT5aW)@7p,3HLtW_s.>VKAJ_%b$n86/t5Au>SC4MP247qr[Be\I<m6*aAFCf>3OBIQcDl*fqaLmAk[eC":oa/)DqB2L_+sW*#!N$-A+T>(F3L*BofQ7EAZ^u7]W)f%8Eb@j`qO*niS3BAS%`Ha/$n#H0-KYN#X1+nMY[3EWTNre7UB&5dJHcFI]jt2W_c81Nk^pZRjpO#8VudAh5c3n]Ed=!\!6f-nbe-d%DlOXj[oA-PF'_ae?;SVhEX,7;c3pWns)+-%SJP8%nF$!CWm2!P8g%jG?YRh@O@#3X>K'H8+!^@OrD:oRkDKYHOD*aoci0lor_&c-%8?_ZHJ:HdH'>,U0H`9C7IO%a(XlB`KgQT(4%!l]^1gBM:FC+0TkPaqL4oNQn6q%V&[G,H4S+P^?/Z=!^%7"9V(0$#95noW"62t+0%_OH8Z%tAml$\2Q6s&U6c`[?#&U:oau+n4uf6ba:Tc_,aA6YJ^`JfeXpjVs*VoJ582n+/'gm@e]A4:.10;&iAYR04V,8^]\R+tAmd%"g'1=dP4dq(gOl(ZiDCGN.hcj&Rl%fl?)!m7#WEO-tA)N6a8Jt@UfP5&>4]@Wp<:@(mUa3r17)XLiEItQ\\Kia[#qDj(Y*I3^>#?%-kTpq^u;cDR)!aTQf3afOC22+^B!a,JBs?u0*sP&TK,n#JbKFp:XGF_!ZtnXK#'$91`DSY*D''/mJmDrJbL"4NfaJ&Qsgj\,G?al%1r'b]*\Y@H4D6#I-H:%iJDX;Ki!Y-+`AiGNpl#bo(^uC\,n^?nc>YKJa9fPu_D'A6(r-SP""FEs7T'5W8]8[Q8&<iN*Lb??TWu>7%^i+WQBS[<)>f,u,4[F$AJJJm.C"+>Q%=3W;%j`2#a<k@I#@C;W!)(ZGi0rVLoF;CAkOD21,SV:9PR0U:G`i=F-3B/8AjiL8Sn.BD%8Xef3HVBBQDF#-D`!%/H,oj:_5SPBgpc$MT4>)2QP%Ip8$'7S$)"57B7M:O\L.BWBNSc!A!mrFsJQ\5A:QUf73IHEIZjR9f#_H-u%!sJ7[j<Ye-,`ThG"=M9(&f=(V1!@ujVDs1$Dui8@q\ZjHl2X/A^gOSn&6;@/i<"ou73l?h0b0NMT)jAX`*rSB-0RKa-:4gME"O!9%C0_`!!SnIN/qG:2#YkAOUF=o?i%##\%S\,7J`.nW@u8FpdX-!PE.%e]'3_;)Qs#/tY)pGB)Y3s0Z3o",0Kt.bQB*>F"Gb%<;_3V?%MI9<%Tm*lZWWd&K5Xlk7;<u"k&Mt`;35r3L0&_(Bi^/[b8;6=AM!J2sBnjZLa+8W#8d%h1,g:Ocdn1m)";6u'/a*koZ+'c:%]NqH%(8OEOBCXV6G`A"W'2&n<:8ECW?kNc5#nS++Yk"=-AVg4$cDt^eVMsI;*BXn,*%;7C\Pl&EEekMCc1/GQ'V!$`G?KM.4<L-t"XH\2%Ua?F6Y1'>%Qs(3o5dU$/,1\+T!0@C..Nk\neAK`\Ap"<FLe#r$e06Rde7)h2Z(t(/YS`IZ=p`O_8b/6(['E)Y&-+Mb-(ZHZaT@n7%]J(V8%]19YE/:LO4m2tOI#Mclk7Aq+5<0u4<QP_<@<dqi89Pom'f1ePMh8K6@(HFS0d&q!'So&,P\!"V,kN,];M-.cPXbbL;4L%"%!Xq1W+iYZNg7TkY2%iJT`+M=A5[R'$_Q6U*!$ZlcKENp$&hK)V*E9Bk!'-jX8NcI7:loojh.2V/@UhMlOSTSd2FN.^hil5SR22K=%QqCO\-)dH/Y?7>F8Pm3(6pf7"8V1D^4fOU\'!ZO1#\[UKp&Sbn_1OGd&kMW0<7;se&@kYg:6(G>"34;qgcu<FUr;nU2BL0haWTiO%Pb<;T`]6/BC+W7^4;*%ALs\g38XQ:IPVPM*J.rT1M<9o&9d"FE8p%s*!iBL[je^RZ?n"[#1-C3S!"uP%;["h5)eOXXLh@'fd0[Jt%#MLBL]\o)8TO4f(JO<@qhG_UZhuO"=8d$&n"f,o8l.[M#FtGD,E0![ZQj8KIcmTcd^prPm3jAaAnKY8/4*/3:fZF1DkE,8o$&(:6%!eA*S2gNW=8f^NeQ?WbaSENRq<YGNZ^F#9JRLq/L8OB'qbouSt']bDL,:OF*Vc^#c#6Y(t*>#cSF=A@EP+Wsa]^&3UCsj"L^F,9i%L!!=&"t,go.Riq_.7ijl#au!)7`nE*!tpCOUe2&H\h+K94G*hO.*Qi9.8qrdUQIT(,m#8`%%da`KqUgRUfW-7'!*?8[J)p9Zd:c&%&%#,q822:lN]N-q5S15a#87c9E&':!-)g.N^6%)Y0SMcK,^_io@"F&9!Xh?1<'W5B`Y=$F,=.b`X9e)%Q*:B,[j9BcK"cmBrNEp_%QN:eUGksZEE&=Eo0U2g@!sI$u//!T:6p:kuN$Pk9<'A'mR8'nHOc1[jbBof<L'].c?>#FRL51VI,WUEd?@mg,8VpK!XKe/NJCl7c%GDQMCf8F<+Oh`Fe0Lm@Qc2kD<PiQ]>%\_M<=9<ac\lt=LOL:C9"^qH;?[2[sMqTPS*%4:[PlP(u9sKGh+[hM#>pV<D]HB!JODt=.%Jcmh6F[hY1N/.BVlI!abHO.h+i#l'8MWBknK$!2\WeMrFjdm]0KGC:8@*^-M9Ps-KBUo4HbU%L$cU"Un#t")V+fcAO'f<a?TF'[I%d#<W,)JOBe*[aTM,d!23%"6/3ZE31k"rT1pFdhJM9aj4I,W8L+/P*_r.4lgC&P#1fE*G";!kFhU171aOlN27GDO8M-*QpuGRm]//%!ngm2iXnVn!F7An(6ba,"GBEKKN\W;AiZCf<!tMhW"pf`&@o(tbN]5',)Gn)&B[NZ#u4J%6AIg+E]ON*Q"Ue,/Q3r<K#d171T"6.%i!gll6Z*_ak\>+Y$'W%n8Ho6GJ5?pg1(\.5AG9dn&=?7ZSVdj:ORh?ZK+-8ddpsT.09O"!"/-5Na7;8/M#'^4N'RZB14b_`1r44B%(<\&/#c,j3TOgRE[8;kcbH_XSkgm(jJ"_RO,/JS<GZo/HLW2+9Cn_Q*TG!^"8YNWtM8LU=ZUl>'Q6J?6fgI,3_e?b2"^W^sZ)lg6%Ulb%4?nBF6-ACG""K-<!.I_%2Nmdfn'FKE<\4lTR.I\a!Nn5.)'S1plcE0L<+gU2iI3k7@NoDls'/Y>X!c+qca:M`kAA'Fp-7T$s%'/Wch=/*9p\h[r`@&-s?NVQY9S=gMJ*CV+[eshHH:c*oklsthRc9iu[b<n%^82c$=aYL6a6"*OTii/]W#Y&ePjOca;n.;9"3@fK/%e<^._ni4L^.ha2eJgZcFFn-OrS><EjX3+.i4&57!:uF4KoEe]OM%i31@WA4JQq/BOlk<ZT#t>2Q@C>ln>+gS9Zm$Jq6B*70-q\Ic%5R@Fn31WQ)Jtl,H1oGU%'R&e6Sc+3i!ZWS?!JSlRZ&Mcl>%0HhM_:\0J\R^-\qEVBAnbET0;0ge0XMU$6<L'%3K,.PQOkZ=Td2Y.%KF2sq@'njTN[**4&t1R)@\EpkZq4669;k5g2rW[mhLaX#Z<Mt.^e%ITR"e(:1dV;#)i6*O"q;K)J[")Va"gW><5T^^#n3HaF]D8f%KTkc#"H%XP1pDr*jKOlaaCn-&n/p!`b7P0&"*VMcq2u<]"Zje+b<V8SQuYc$[jF'`>)N(_4@)7_+[MYC#,>TLaBuqV$^\YL!49,W%(CVF3)'rQ[GZoj5$#dI;RS1J6Dg+=6N#/7\GP9RYLu.+#-gDo3[iW@)#^RT\i>W82pH5N^i,:4*5OrsDk7qa`9aD^g0Cd^,QYsZS%ke4BL%DB+d\+s5Inf,6O$-/ak2W?ahiqcn-]k?K>J[ok39oIl`8CpH>gHaMf.G@>MU),c;\EM2^FKY8ug0.Q$`!u@A1mOPD?AYI9%dClKb)eiY0=b3OA_cj4*mc>?"Jd)'DaQnTE*u7YqZ?p79>sip2A)Bt/92iL3;Nhr1"19J8E<F0lKsH8Hkq;*.kqtb,6\IB[OoF:b%LHfA#'[lW;@GM[sZs%ao0Aflh^u>;*JcB.&0`V.t&bphaUOUuOb$.Jl)O-7]<FY'Ur6LVdCUkhI-ocmm*B5K[Kb12lk?f>0;,<^.%)iO\8l:U(9Tt]Aa*Un5C\Q,FqJGEXgAp#DS$B?Kfiab0L`DA"jE[_0YjVTJ$f(LMPdDo'4]I6<IqKOHC<jZO40U0t</BQ;V,iI-V%-HB+PJA__^PCs!`'c$4_klE%J_]a2r@@e<MOdtJ%OuOrN"M?gPQ*t4"1d#=0GW(J3M1Cp0cf'V?&u'>9Mrs(@0PJs,IaXkr3-bfH%LU\cO'Np#3og*MRJ\KNFH\u!b!?._(.0M5a!/4l1:i'5l$^+a[mt#AMUkK:05>ZnrdF-;@NeJ6k-0esDXpcY-#Jku,#qUs8Z7+GJ%"&]u3!@URTi/\*fi>7<8&.f=:Sa_<>oZQer&Si[L69H^3a72!_Pn!@s^_:D7)BjjPRNRa>qB5#\:>-50\kXH?JCR\P+S"rO*uRf8%;[eXpdF'p*OAQX^;!=@7Q<"!0W#")"VCX_/+mM_IFs`B;hil6FkQI3lW;D(uqj&7,DIg@43<)eg%<!Ke-AQd')DG!<4n-*-Pgt0k%<-9/FL(40rA$$$"OaF!VHVuH'Nig\h[<=<hO'jZuU_e@u=41sZef3/&]HWje&pcTngC+C/&:@4A_A(]i4Chb4LRAq^8B>Xa0++ZW%8>Vm`8p6/PC2>OqN5BL/rJj;l#Ceq4R7tp=UONWe"\,V9U2Ya.3X_5ejd?-s>[i2G)6N\6#*^-*f'AOP-p2I&N3P6LVXm>S[T8)S%,"*mdKF>W]aFVU/](Ha?Wa]n5I1b^^9^7]K@'e9R:,cb76,Pebe:r%1^XNp[e;^TT%"i=``"Tj5iUa>oNg:VKQQ!R!($qLh$sboY%L3j3YC;U,JKS3h>)hc:9iVJt`46M8_)=As,'auVGDp%4OG+Zs64_-KaVm%8Y_mr2lK^=]>R-L(+$kj]9EE6Xq+\eE%o+aEMV`"*B%=J;mKr:fEtY"&INKp4m<lB6?64g^He>SO#]("&uJW<%9J7<:HhA/Qj`hpd],LKZ#JlDXb7-UpT^m%7rgF=NYpUr#hs#-bA8&e>N_%01,SjFR]P'c4oL']*r[I]C^kbH!j"'a_7%'\L*@^fI>f"M&&(8a2-^XKX=q@5opWOP5Wk8mc8gB7H>RfL7XU;"1*\,\,<\)(@7#-%.Z\O]#A!=OD$>g<)u:\A11fi(F<H35lpurSJQE_O'3GF+EdPFf2Bp#1PUlAn-NU#"/0KthF0QDe/i:&4"85m]Yp<#,>sJP;&Jj,Z%<:mtmA6pe!IH1U"%6>_d\o'DQ4"N(U">.`*5p]?I$<TBb3&!DeZC7]JEHKP1rG[tBEl>NP@E@heh%XhJ<62nhgC,IPd.L4:+qWF@%h/1Mu#]44DK7un/%&/Im0-!UHI;nTUK'i+u0OWjm[JHe3USX`b-PB&61FIUci3"/gfUnK$E!1h/-k.r):"XH@NZ@p+BT'Q,,fi"^%]'P>=cA+oF^H/lW0K,&JCJR$d/[hB.@kOKM=G-1@(""A07E'otd2$`sLnJc$@W3TVO3WP>+<al-&".&U24@!J&T,=.9!3uYLp'cG%43iX?LTH:iLKR"ahUG1J>B<1s/#dfnNYkEtGZnZS1'L23Sj,,$`jM$%)\ZIcFO"eUJuD8<%O1a(,%*l-\5r637)8NCZ]&(GkWd^>%WiRoLE?dR?d:!gg(^He!Z$%qunX3G7VrOaLlVdDV%"J<mM'0q=3@!'F+.WYS1ncbY*ca;eG8mp24T&,un/]F'"MJRq4&X=3(9*$I%V+`>i,1Z0GPKm7*>&4c"/M`*$J$N.a0[>J</k3)W@>k!r-EX6MmO@Dri:eejcQOh,DdtTk%rZ3R#J7tR4jW;0fPC.R]i=H=d]^$j%8&8k`O+u'8HQ3PJn*rM6gF]QU%<(f#[(OHTd..t@_^KGC^FQ>\pdt+Eom/aj%$L?ZXoXEja#DB9*p5f3Hb:3U]Z6#ZnfC$0Rdk=8%4`V]>rQ\YsMp19e3h2]`rBea)p,;ZS`&PLd4+)YU/oXrEWr>pNQp+eP4TKc>g.,l/EQAKeGF/Qaj5jPKPV&n!7:]S)3423*9CkAA%)a@ib7=d?)b%+rf:<)X[N7*[!Y2NJg3bVQrgLMefYGDa^PN`B/PGuIDA-t`BJ#CCF*Rt5(\&gHI=aFsojtrJ5;-IB+mM*kUrKIg(%i>M8NO/#i9jt`?bC,n?#A1CBoAk<?YA3)cqeBU[FGB_d\jR*=7Pem(5FI=6t3+On(+5"p^I!n'd27YZuN<]kYQB3CCQTTl4bRpsY%MSWBp$S2j[(3!UP%\5XoJ_nTRh$VADKoHY0G"bp-8M6B)3W4\F`Ta$[Vu*B*>#]G).!SO[dGl`T)\9?&W57+1[BZO@"moqR077oJ%9UI;NpOWQ\VPoF%7OnpL[kN$&T+XcPjr\]=1*Lacm6I0M&_KDB$$i&[]T2VAK;Mj7atf-VO=/)@nb^rH7nruNC,m^>2%+CG>F:-6%""Bc/)8\$sQFn@'(DjrL*Xq^H=pR?SdXq$QL@@98L%'"sL@Fe]UH,M9G.qqWPEe'qYaAbp;m8&"k5.UR58dG0B.S^#`F@M,1P?jk%QpLZZiKoNMch)Z1N88@bL:mO'Q6=HaIdepad38_e1\;>l0GDi?`@N>Yk4Z26VItATI_gZ-\LkX/0S]Id0PL=2RU_+k`/\A%V'L<r%=;L.o>%3H3KeH$oU$9#0Pe^NJ*!SKF+g57'jZ#'Z&4$Cd2lk;-L+=K[Lg];2!F#`0@!<%)W?ci4nm`IpKT?bai#-gWmMRX0-mbS`%@4Vh]BS'#q=E\a`HY85Q(`<<^7bECT:!I*0F?=ANk=[dN;K(p.@),Sf28L_(RYm-rI4eE\V(>VF,T5cs?M<#V8d\$3PZLZQS.F1u%fFMO*ib!'9fh[d'@^HO\iQSk9E8C0ET)pgnT(,,A<<q.T*8F>Y[CMkY2G]N"_U_E;1j=Lu%RLVgQ0'\ql=meGp:+Hmg#E`_^7'=#%d=Rl?f3Y<m<1Be**sQj)[Xe_E=$KX,nfJ@R'Qjn@-?P!AaQ=<gXD9LLKirUE.Me*aAa>%^WMsm]R3+rI<TKjF6nHq.'6X^/Ga*85%jh5+8.l50<;mHP>-p)t>$:&A%9HHY&bO@8Xm6EMKYe\pA5<36\`X]$f/VKIklO1uZ<#K))R*RmiQI)e(;]/1A:3R?)O`nPAbfNJB%dpO"dV,edCc\Q>`/RaTQ'+i\EWLZnL:7R/.6Q=*E6&_Tl$<F*q!JE3;;R_adKnX<.eVRe@P1`eDjl7*kMKsIoPi&_$np0DG&q/Os%+%3kmpUo6>cFj+ncnfm<htVNscEH$]nCm:OO-c1,\@aZ2a61k>*iDM8n*t_JcOFcq%I`h6&A\g9s*dPa+$YV]UA!#J^A)tC^PXhA%jW33627UUGF]WrJJ(05I32G!Gf,pl2P]r-d-12]WWp]hh5>maLmMr6.,k^\kkVllr^/>$8Nf(<hUZ1\7;=Su(W-J:>W;'qaMUu58%W-GuiE@+D.]n51edoU;$?/G;Orul=XJ+?uprE0Bc[q:,.&Q.%`@nS>#`Mq8:<-E@4&@I<M(f"*O+aVF5qp$!,8!FIF1nkMJ7>]/<%*ha5\c4G_JOTY$_"=KrkN=;q@QcSFUjk8?EN/P%5(/<fqL#o<f@Z_3Y(Se="Tj:STLB@fr7!NuV)e[[SD!6E'CE(-#F11&G!Y8WK%R_")2csV$_5(^Hb8B"'^9j'+&AZOE<YlkRZh3`f4gaWoDZ?AVb112iQYltY,7R`p`dB74Q+M*kJErauqN4iIm6YSj15V$Sab]L/5%VWUQOZi=[kWA_7?(a@\`/tR;;e+4kJ[)!Ni&W:#GG*sXWG"e[KK[Ur/-Rp@7"IlR5U'"/H+'jXdhBg?)(u6c,4\0+hF#+>C*2DFV%$UJd5XS1S3+UB/o]$6H]9P4J5`+1dQ!N%sp*HON\$PodY,VWh"MtD*\)<+AhWWa_)&[]H<O.cOG'VpbF&Yj*jaH;_.&#0@\X9Z=(%od%aJcWVVBd6EUXU^,.J8mjY5f4V2F_2=&J$nDi5H\POS5);Y0BG]/#:*eR[_qHXhj@Do?$UZKgS4c+hQVQ.'6BH,10L8_"D3XBl%,B1!^dg=?R,Dm`#pkQ_HI@QmD-A93Y?FdPWR`m4b^k.Ph./fD'XJ79bZX-d:/";lPdj(['W]#&(r+:kkQWFp)+Gl14n6Xkm1P:%h%@!XMOb;<tIX)2)RO[Gd?M6S=!/2CX?6:]'W+2J7(ZJ`!SGiD'':LS?J<RRt8[S85r3B^nW9('gV+%o4\X.7SmgRs-Md#[=\qB/gC%;Rr3XaE[_nF_2YK;IHT.L.&8sX_Fc#%,26tT7Y!K4`N$,\Uiju>L<#[!Dn!c+u]8Jd,is!L>l`(%7b4t9\9:iURl:[4(?qX^Ri;6%^.$/aomD6qif>VR:L&[j`'r@H%AE)[$Oi;-(n4F[jN&JZ$BJ#m4h2950[_q^qQR33UBu,Vj[euk1F`MOGM"'tj6)kK/8D`Pr?e3l%(!tP+3n+,W*$]g\Mb73ck;'+Y1QXW2M4bm]L*QMlP&8)7VPr#crT=4`q2=]@Y`cf&iu?[hgXr$LoqjTDo5ee-=.f2Vc[P>*H!J&W%M\X2l$h&V`X8D)_OjSB<984MgZ+A[*Ic-;&Ic)mf5JZ$#b<,Pc55S=.08E]#EeY[sOHanT!no%f9BYhG;mRgGqPOf`?]rsQUG"g+%_D1_h'n1+R/H!:l(4H6O6VD%d5sBnf;AXd9^dO-\C&#LETCc8s$&,gA^RlK`,?mmLrD_9?MA:U@lAq\K++Jg=ii'c8+!aep8++]`%\JX"A^(l/Pb1rmF!!2I8%ClHA]V"cXP\L6?3L=mhJjVHR>M*D4K':-(`](2[MN73u\)LiLfZNsnZDN$^E_NF:d)GeN@4<c9_fAlt%3+[LUJI</q2XfZUc[+SoQsiupCXU+ZY:_WDMME(,<ju!-!ZKToMiU-=b=eif!<lc-ol,2oEf?LI];#E_bGVrX"H^%AMU^jAN6H>p%83J1/YT42iPCUEM9&k<B7eW`<AcW0&jL;Q"&2M\C#NPY]!((;U6ul:,JQNPS=_f"_!Y@7J!tarb%>7jl(V'%6eO?!]%ljY,d5m:D%quE66>'@VK+(SnAC4T?B4ofUUU71*nA*o(]\(a:O"rM^g6$-P#3$oBEQ]H5#RRJXLn,r5CSN7-CG\4JS(JNJ8+(1$t#!JfcKa38u%kA37l@MpVJ/?19manQ1aJQu_OC)b7kkEMt\+W>!th5EKU$_m%@20]K&dS>*q-k:/W-Ps?rN0ma..:m.UeL8+.Sk[,U3:W\)PB"je%R:5\p";@TmH=X_t70A:f:'4s&XfJTlR"aLSR[mtEOd7$TM[]$l"=R2O#=YY]hs!n"'U`[LT7JGt=sX8FDNEFBbl*1VVKX]3Cc-38%BG34gAq=GP-42$3Kp8<%$(=R>PEH;\*dDqlWYuh&'Qi,Ql>RX&VPel]:UOmp',!`uXdi7#PX_d68p_&>lA=J,VH1b@Vh>miS_&bd%"oBc"^jm2FUr7.+_aMjodG5<cm<U8.$H%[[`BM?3PR+#get=$55I1a6Z;6U[X>_7E&.KiI69qlFa7Y0PQXD\,?t9U/%<t<SR.6(`%lc?K#9%Pi@;8=\Yh4!UW$G/7rKM+_K+=<fr9S96i9$T6tA&><PN"/i#8/=#f$AKi0bElTHkK;f")qo;l3bp)^!buRQ04[:)1l2of%5a*GA&@mpWT>FY!WZ+[mYN.qbH'K<QcQE!'-ON?\X6XXUn]4@82AkR#E&V9k86HWZ';5o\OY_t/iENBnO(kWHkRhI^:kXDj9&.Q,%Yg$jWN0`Ua;3kIm7psfJF`%Q*?n(NTYfcIOY:;LW"4*pJ^i;Y5(&Lgm4g:_4_TkWuKjl>KN$S,Z&@<'>g"P\i@F^o7[G9uEe'<"2%XB<9>;XT]]T1b^1A*.#dX1j[I3_N;B!Hh2b.TgQ\*)oc?U*\(#`-C4VP6#;+&CrF2[PV)M(up=Z"GCKGfe]cGUoIKIaENO`CT(MM%XBf4=GsY7\$dX>Vno)4@A"Eirr<I39@%uTXA2kKW.@Xm$FOhZUg"^nA9Ib*9=`-\&VWK.3Ds+8c2`&DmG5WJnZ),sS=VC;#N@e/*%p)0C7L9eniM-*'`>S(q5b+NC=PD<K00U'Z:#c5Bg?&G'-da0s?pbCu36YDF)a%K<ZP.DNEi!:1>U9m`j3R!e@X"FmofV3(`#Nh`A%U.)98U6'=Q6<BY,87SRj1ITi#0>uL="c[h^S8qT(1:7@22<-0+lFeTbRSB@p2>g<QFocd>OJ?K61F]]kc#bJd__-69BlZk?pdiMT%P*fQj@EJktLL`*6rV&UiOohif(.g\3g'cN7L=64bFH&mBO/r0OgPo*W(;2ngh@[K[;0`ql5);B0?pnpi@/S02&GBPr*AIsSD[Bn$%n=D$T%IXU5BR!;m6XT9fAD6TO,ia"('?W"^HX[jrh@e&Zn<RabID$kql#_EgGkQ$%nrA6TQ8_4=pUM#76CMej>@JKhhGO.+0DX#9%:SPU;SCuBMo6CDPlM/c?EoR-tcLfXWct&9:6g2GEFqQPWGXK]jT^E+)\i9&5)Tm#;#TL?s?S-/#OMSt5Jc?!jHra*.NTK%p;XCWt%Tr(pf^04B"]6gQ8S(+W><m^9+\tZQR7q&[ir7*9Tdet2_79b5Sg+j3-Zf7])HqSUu!oMJ6YDE&p$)kKlCYh57?>iKgYF!]1gSK#j%G$DP,]p,\WI[@3e)<q"j;S%>S?+U#HV!HW>?b1^"PcinmNc_s%@]rJ!5EA85/nt59C"tM+?:c&R5=a/sbEWk7H)8KmrN=-;HaT6u%[,1Y*[GnOFq_o.cIB[#A8!4mIP,oDI/@8PAf%9q7rY,iijTWs./dm;u;GuLrB8AfCKnl=p:f,gV@_XbTE5l@*"Qc[-.)(2a(p[N,%hk0ARI>#iHQ1SQ"O]F>C2T^9F'FX!+f?D"cV^AeIZei"ar%tYPMnpU7?m#RlFVo'$,n@@+a#&u2$jkbL0i2ZiiAq?3`RR;cCdPX`%]VD(mH3s$$UmO!RZN/YV&Ks7pKT`u-4k=Bqi'+QAfq%pSlgDZ8hB*!di[CIqOT$<G;?;.nj+b`%lb+Q!/`[llGK*"[&Fh#2eA;f&%6;k?]p6,hh$^%DKO<u*uj2-OV07gaf=ksHOe;UUQ#gog%?4\$5!o=+TJg<>rHI[*`9MHIHA9KK=_9:Oi.Rsc)`KBsB_-\*:Zt+c.%LBf;p0U<0WSke5B99o+Oi"FWJZ'5lPW&L:l]J]9NHMMZ"OJ["bKMX5_LJn$(Q\)FW)')2sO;<Ndj44lcYiAnt%K<LkJJ\c"3*Mi>%nS*$8bBom*6#lCU<Eb.80lXA0IGr/jLT1e7Q&Jm_$ijo(O??jhN"MW]QGQ7_/M&%BB;k_0ND7>*%>6!64d]UtE#LO*#r6.WPlu)f%TQpPXf`HKH$%Mu\TE0<^@7N_dF#(=-OFF(4l$<l-qImD\'Ua[S0`.qoKu>0G@0G'k.b&Z9g`=LG*%17T"aLujPRSe/</#*!M6o`]%5quXWQcBI'$0R/,mlKodJ=bL=Pp1\H)PWCK*!0_.$8Z'f#VWW(9F2PmF,<Pk6)u1FM<ZTA0kQs@^kE0e$Y&uGY'N85<0kO8Mg>t+%3U?qabQY1u/I/TkA-E&#15Ci[42d)TdmI.(#U4a1a[m%3f&at!@!-$;K,.>;K+>F#5\F'\BY8<9!Ba\G[8O(PNLRht@tfM<L3<B-%=oTpn'qUEScXb?@$Z?V@g>*s$FQ4F#Q'O@r/DAohZet`O(8LirO#L/mRQWB0f^j!b>Ep!H(bX\<`,Z/J10oF>fIiKQ%cb6sbC?`\%l=UKd1*r"*nl*@\]DQmRs1Jh>`9996'2s@@BhHQqC_I9H0MZJ/LNR'f\'@BEMQ]2Yhli@Bj/9\2^tO5`j8Ra`q"7j!_66okq!B+1%I_B4,Dc\Lbm>;(^r=`<&Y:TlnX6Z#br2]8]f;n<;G/`;[_;ErC5D$TKZcl:-!qM!.M7/%dN;X'J*OIXTY0]PTMGK9V(CJ,E@BV+[%G;Lnn5Vt-3+t*_`KI%N]YbtSe4Sq&h`4i/:(7#/^?K@n`0WHLo'Wp#]hMe6#?:uCIRg6u$lM=%Zbmb@(7RmFGUB9m(ROiYE4]>"p%r\_3;OfdEJOMIBLmuNqslgs.16FR$M'&P%kVeXL,]Q:`KCLV3CGH>'kb`;V@[Y=.^M1&XAcXKXH'U70.0K@Q]7HXIpMfoHl[uJ']%/:qA&K/]*)4A,H!XJ:jXqcU#g_):B/cG!!=j._%+mhK&jlX92[o[okH$beVP$sG"l056$=+s:Ba<^WrC\g+glN^h9)TB0?FeT*7c%Y`J;2JGZR:83rq_H\MfHp#12XkLNQ[hid@qaCE/:\Z"c.cNVR/`PmJR$"g)3ScI%CA<3J>i;F%FZ*ei#<XQC:/Qs7k$JL\!TeNPr%"oAGODs3M*3,`tMesP<kLnSKJL7&(#iT;%9-^LT60I`I`4V:BM@GqCUWB1!p!NoJVb)$>]Tfk@Z*L^4MN1IXk"WuNN7Xktqc;NR.%_=/T2]ROpgc,.L)]f921h$P4=j+qg*:QHe;hIhF'lV'^Y*=Rep=tppZm@[a&nC2L=j8QuqKgQ21_1F@XFVbj^Lt4?.AD2mR3Qu>/%PlK,&iX<s^\pT-aa5%/s<!P4R-g&F)&.+ZXGao*0Ufh-G3b[q`XY@XLhhAbK5R5ud_D!9NlGka?ChC?oVMN8PFVRXu?#[<TotWaW%h#X)97)@(J=e0HabV3?n;/B7::IX'70:AHmAYk"Jp/,+nF;PD6I4?7=i<KbsE]#A*eB-]r#j6=cm,MPi2JKFR/]pkndZS+H4j:Rc%]oEJAlaYYT@`SPo`S.>eq@\G$02u`11.bOYcD0%</MAg!6?!A0SkSM2@^L$J6+#e)(5N?ld;D<h+s;';#9mNBRu!3.TTmL&$+5]6%R5]TY;fXuhb@ZO:NQDNi]G/45@kL"l\7$:HC-r;am)1&dF_\nPNFf5Z%tpdt(c/u@ksu(m4uQjn<*%L4+J^>Rooc#@NOJq@N0*7`%Z06$M&N:/6!VXq.Y%g0[deB'Q`.V*4*KNtga7JZ4c+Uf?Ls4oYjO@q;KL,ISPUF(qHV-?#("G#AkfoX_3eKe?Y]7\0P`PB]Fs*M@%7$W`E.qpQ1B^'ST\$3]s0k9a9MRuoiIZBO$=L2bm%!W)hD?SOWJppmYhq'!?o!#=l'^U8H3%a<1%<nD7FE//5YP7990[`La+"n6:%d#<USc`=Z?XJ/04q4L&dW$^061kC(a`/%+[.@u2%V!r0aJc4)l.[!]H@@@/LK;uau>4Ec\?LaVZ2jP[b@2L@I[!f[%$q3Li653TY%E$FL5ZA?O!<7]gHq'HRQj6KS"e@Ks(%g7+tR["p-pr^0,!<kDa1N+Kn_^S)k[kQo68$Q6M&V2!*0><p2!cA35e_1ls5:kt<f5;9c%Q[.M&jc,p;L4pIdBnGp0@'p)tAAomj(%C52B]Pi.0Y0*OfOh97H@cISpbhCIL7_krX!+>$BM5,nl(C]a14`kOG,P_KPdQXjqNT^X%TQtCj(`#DpZ^k'C*%Kc"P-4F["<reu7o!UbO<[q'5!_$ks&a#6ho-hUluM_o'r*4jM+&p[qSOTTY1JEW"b%l[%1n`[\1h*J/^AB*%#O;L*BGITY4^e'O7'mF.9=D@.JqgST'9Ii./52!9X]7<eS3mETDRp0(WHB]MPZWFq0(<,Jd=`!1TbB][4cqUq0[BDj1_tb@%'@AO%$^L90S=o6R0D_M96eVh^S:neSf1A%UfE%^-*\E@@.2p'F5YC;e0,@_J;N:99@@RAl*H-T2@Hq6YT$ntA\M#d=M2)-o=Z'5)>.#&M%aDAgD@/eT.1h)W!o,a%5qB?=Qfcu\H^+TZt80^38[fn7WIX2FkCs!%kj/qea:\nIq]]@s)9CGi<Adu).D%KkjV)Z1+P*R52bVRJI%_Yqhie$WKbZfkq)o5dF2q`n2SNc*sgiZs,8=C#!FB,Ess1EYV)<@YSCn52HQR&*cc%;)N$alii'f@]V,3hG2^L!e:/2%_E2P^.W$%I]D,@4FC)V,=p"iid6sp*G35.U4p.+pTikZ\3;P%e.OG:/Q/lUF[7EJ__F'2><p<VXL#&U'Ck1_M;P7r7!aQE4K&9i#L((6;)+Y8%C4M=)e1pkg3.?j)[)<_Z:_l@5k75aka0ES+>L9@:\lEMP9&Al111ZBt@4'+_2h<ieqE2Ltc<N3-C%Vi'X8:eLQ[G!dKk'm82+1#:%lS@k*Ahb.:M2F8b'N^QVP+MD/k?6nI*T($7n;R;9Zu5>F;$R;=1>AqI^r4Q'aIU]"k+p3Zs'dPCrmQO5hA6mhol2]j@:P@;3jdn$%@fA0^,C.4CD!M/F#ZE`n_lfR=Ft+@fM8NiVaHFR]J4TWO=T9`K.7:Z*L@tl(ghg'hGs8]NM-*`BR\mbfjr0ApN:u*d*(CER*MGV&%N&lETR"X7TC>Wrl_B-SD=c(@2$se<qMfQg#3*kt4U46+$@#V6<#cLUH2"l<!h9q/Ef@=OK9n$/;mg>-+$u`,5EN<9a4.ItKjFX-U%'1\2GPY<B2@!f;%M0KP0(1n+me:>=.Mgdhqp,",V,]qPM0Xn>J>914(%,sFmS8461<Q-Sq4gRrAF]8B?(`(7E)]LSEUVd"G9N&9X%)H>Ygg-uNdVV^#r4gkj'7j/4P0sKCQR.)/_i?,(s,>MeP@@kG?K'=0mg8Y?D,?_BjW>`FnYuR\i'^WEje-`j'9JpNJKd+gBpeFfk%*_kL7ku8*c_R-FCdm*q!lBY)lfZ;W#4JnQ:Kc4iAR;*Xboi]V>5u4bfB@L=`ohmU`>!9_od6PrnQChB=#)^&C8"5A?<lIaJ;pQk/%b)0-D^n%B?lJNTC0(U(l0g,W^1<a+"dGY/6B]=jaW8GZq1E87;PMqr1jr>p0UXX^29f7R!e!u`?>2*Z#[b>3.Lr*jDXO6F#$qtP7%:<0<Vca7hR3o.5>ahShaqUD?P@(qnc:&P)U@.o6%1(_;rNH[V;XKqY"1J5"'1T+h!L'(MTAsBkAO(^=^^fE9SVO@\rl)QOQC)V>>%3l4J;J?b[`GY?L6W)>dKU/>MOGGf,=.8hce"65s*4fW1'<`g3mBc<@#QDS#X#'^Jbs-KU6V92QZJ4#%)WMO7#`ZPZ//Ob;m);@a1%^u`=':/fPBCi:a@:X%38)R*(;<HHA('u0YAUmhp4eF]W3k[<W:FaLu1;qs-4CV7[BdBMMPKpaC=GNAn[/_@M&=Re4KGCVC2,!5Vn%dpl>86<Rir#VP59cRS*Q"[]?BPb"D!io\qKTb+2Bd_O5pcnLLY'^>sf[ap@UF`0*4dJR08SnmVo:Q9o;:>]6j<jriTg(rSoRa\_7%XW1-Z(-9A@P"XIpVjlAs<K2SNr1mG'BLse=mO?3o[5hfV'A:i+g#@)aVebZ7RC^tu\h.1qjdl(?fdjWge[?$N_\6gb>I]d*=:N<M%DBUiN$8&8qTu+1&d[ZcU?I>lnFkerjk'q_-cf16hhs)V?):M1766Tfaa-XMoMX/MdJ(;"dZLt>Z9mpfjC$AjfHVWI%]it7JH6,kN%e6^_.Dfo\Ie#+&$AU9g1>F82S!dT2%Q_cJeD!>/N>tj4'>.b*"CH.>l/kLht9+jKQJgsN;8`in:esPif"El1p24%iC]TjB_c.RnT%*f<,+-&I_Nk+6j&LuWR4lEai,Na&2(Dt@kJ&,*&G`t$r#bT6LA$]FdmkE[n:T4%B?G/@[XHIPV^Ug;pdk/:8J"6Fks;?=pfOdnjH%B/=sukX[\W9W(0c$Wt,6LRBenQQr;mjbr3_e31BjOm&&*0[1DjNiVe6]b)*POkK;.X>sB(MoSs\lSXKadN%+<;[u`p!hf:&9U\;\%(9:\%RR3C,*4V$+$46sW[)iL!Oc84<,ZS5C<S;I+e]&R8NFCH0>[a,'$7dHiPAZBJlBNG)F(7&<HCfsb=0@=:ZLF.>3)(nmS!(fG%,KkuP_CEanYmH=eflGo%"[nDQ,:j'N_K)"UQEH'E3?VbhF!D\Q_I>3($]_I<D`+stU<t+7kip77_4n$oH$Q&7PX+@c[Da["Q"n!b%]o!bMX16ki@`tC'QrM=U^VlF*)f8M.;>1r4*c9O&!o%%!2n%i0INIsLO+OT'RN\#aHUD[#_UO.>0K0^Y@0)t@JOR2"B+[/tmpYoC%HFXFU"7#C1b?^cB0VE];\I/qnTp.qu[mQIJgL97+#,6eRVO&7Zlb#c&Hb$Npc&@)?EjMB3DkC?RN()64SM'MS(N_!qV^B^#%N^OL%37H"J2#5T]jaNRlDTo29MG+7.hO)4SEML-=$..=D%"NQ$0->DsUbm5?d)QTK[CMX"ifN9^5%4)'o1cY1'I`c7j^u]T%?)+L9G]WK%X[Pt8Xp3.<^b^3-*rk*IO)slrWO&'9eqO.rfV,<hiLOU^d%&eZ"hFZ`]\om60:t`irU`,!nl9(NA;1&oTHt>b+D2m3(MAES?M9)`%*J*P#auR0D?SJHkmLic1`_9dm$a<3)Peq%&!kWgm"%q]_A`/XhFOj*;Su61k+KT9UQ,&+2%Sk`pE8(t&%Pf$sFb[U;,=,+71Au`G%+*>p^\-,uc#bW#t`EY[D`o<n*[M8nk/F!+f$[Zqsi#MhZ@rY!"7ID1NOf(+"h/05Enen%=pAR<2T_<Ik"W$59-;W7j1UQPCcYmke%[R@`0&KA/59XYYK3+a@Q$^kFY5]@Ot:u.B_4%dUc$?4.gn62(93#Opgl74_:9mc0XOe.Ml/L]bU_20B9iru*PY%<>S=(<F0a"9[`%.[IGc85s2XAo.e$0WG`+0SVoH&Dh6)[HMa7qDC.bJq(R'LH]E`&h#=#o:k,g/KC"D@UmU'$kj6IKj])Si&:72bXp>?5>1=]bjcT%%pCu8gl,J[a`<u+[(Og3trPMPLr[7"5(4p[[#&Ia>jK%DpT@<AN/u7PZG4-[Y[?L!U%V-mLINZI:$AM_"X'TRtM&J26!/?pT3Ls>)%"W#Jirj7faU,hSe100oc]3Rnf^?h4o:/SV0Xk&FZj;.+WOW86+);]qNS-6hamAGW^%<I'+N(,7=?dh7fOj:1?3!<[6IIfP?Y`F]J%jE=WgVFPXpjb:7)9@MeOe?q$?S"JR#^GTqsnDC6H9[#6jL$c\G!omYS5DAJg[@gR5CWs2WIG'28ci%p5Do+=K-FNep"bnuoRP#[b%Bi\'RNsCfZa#OL6[&R/BkF2QSgC37&XO"Vm[bYi@nalb0^EjIH^,;t`AH"VP9aSi8`X8ms*%-5ABm#/iR(j,%l1nodlMtT4`qJ!b%MreN\lgQj::0d4uJu]F4=Y]ktci&5&;gSAZ8WNT$OB_%BVCm=KD9lJO_f"GD`:gi-IasS!#ZgpWQj;XBN7BP5!0T1M^$.tn5['Z.%ccl:!$>rLG`K^=#SB'*)P=,+.D7:!0KLNEfbnFoCDP)!^;sl+#pjCKLkTC#dom/jbG#70io:[,sVB6(V(HK+YK#9c)hIlHW<%m1s%5CWFr5Q'^8a++'2It.@ps8;BH^\l9An%S\&huEM-s7YLIs5W-p+2@aLDr:Su+'u\]b?t8Fp[A.]_uGs.?N0l_%tFKR?[r"4j_t1m%fDc:JR`rgeqsIhkbCBBZIfY*mMJE~>%AI9_PrivateDataEnd